[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "🌌 Welcome to the Chi-Files!\nThis blog chronicles my journey as a data enthusiast, tech explorer, and creative thinker. 💧\n\n\n🧑‍💻 Who Am I?\nI’m a Data Visualization Specialist whose work spans data science, analytics, and storytelling. I transform raw data into meaningful insights that drive powerful decisions. At the intersection of tech and creativity, I explore tools like R (with a special love for ggplot2), SQL, Databricks, and even turn ordinary Microsoft PowerPoints into dynamic storytelling platforms.\nAs a curious explorer, I blend technical expertise with the art of data storytelling. From complex datasets to visual art with ggplot2, I transform data into inspiration and knowledge.\n\n\n🫣A Few Fun Facts\n\n🐱 I lean towards more like “cat”—independent, curious, and always exploring, thriving on discovery.\n🐶 Although if asked, I’m a dog person. Dogs hold a special place in my heart ❤️, and my furry friend is my constant companion.\n🌊 I’m captivated by waves in all forms—from the rolling ocean swells to the invisible rhythms of radio frequencies. Maybe it’s not just waves, but patterns in general that fascinate me, like the elegance of geometric designs.\n🛸 The name “Chi-Files” reflects my passion for mystery, exploration, and the unknown.\n\n\n\n✍️ Why This Blog?\nThis space showcases my discoveries in data, visualization, and technology. Here you’ll find professional insights, personal reflections, and creative projects—often likely featuring abstract art and compelling ggplot2 visualizations. 🎨📊\nThis blog aims to inspire, demonstrating how data can be both functional and beautiful, analytical and artistic. 💡\n\n\n🌊 Join the Journey\nFeel free to explore, share, and connect. Whether you’re a data enthusiast, a curious learner, or seeking inspiration, I hope the Chi-Files resonates with you.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "posts/2024_12/index.html",
    "href": "posts/2024_12/index.html",
    "title": "Fish-Eye Lens Effect with ggplot2",
    "section": "",
    "text": "Fascination with “Warping” …\nThe “fish-eye” lens has always fascinated me. It was my gateway into photography—its quirky, distorted charm never failed to add whimsy to my shots. Some of my favourite memories are capturing our furry friends🐶🐽🐄.\nRecently, I started wondering why not bring that same fish-eye🐟👁️ magic into my data visualizations. While it may not suit business dashboards, it’s perfect for artistic visualizations. With ggplot2’s coord_trans() and its \"pseudo_log\" transformation as inspiration, I decied to push the boundaries and create my first custom transformation.\n\n\nDigression : The Seigaha Motif as a Canvas 🎨\nTo test this idea, I used a Seigaha motif I created the other day. It’s a geometric design with overlapping circles that naturally lends itself to experimentation. I introduced randomness to the colors using irrational numbers as denominators, leveraging R’s modulo operation for real numbers. Just another attempt at creating “pseudo-randomness” in the design.\n\\[\nx \\mod y = x - \\text{floor}\\left(\\frac{x}{y}\\right) \\times y\n\\]\n\nFamous “Irrational” Numbers in Math\n\nGolden Ratio\nThe Golden Ratio is often represented by the Greek letter \\(\\phi\\) and is defined as: \\[\n\\phi = \\frac{1 + \\sqrt{5}}{2}\n\\]\n\n\nSilver Ratio\nThe lesser-known Silver Ratio, represented by \\(\\delta_s\\), is defined as: \\[\n\\delta_s = 1 + \\sqrt{2}\n\\]\n\n\nEuler’s Number\nEuler’s number, represented by \\(e\\), is a fundamental constant in mathematics: \\[\ne = \\exp(1)\n\\] It is approximately \\(e \\approx 2.718\\).\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\n### just declaring the colour palette here\ncol10 &lt;- str_split(\"001219-005f73-0a9396-94d2bd-e9d8a6-ee9b00-ca6702-bb3e03-ae2012-9b2226\",\"-\")\ncol10_pal &lt;-str_c(\"#\",col10 |&gt; unlist())\n\n### Creating data frame that is basis of layout\ndf &lt;- expand_grid(x = seq(-12, 12, by = 2), \n                  y = seq(-8, 8, by = 1)) |&gt;\n  arrange(y,x) |&gt;\n  mutate(y_odd=(y%%2==1)) |&gt;\n  mutate(idx=row_number()-1) |&gt;\n  mutate(x=if_else(y_odd,x+1,x))\n\n### For each grid location, I want 6 concentric circles\nr_values &lt;- seq(0.1,1,length.out=6)\n\n### Just defining some \"Irregular Numbers\" that I can use with Modulo \ngr &lt;- (1 + sqrt(5)) / 2 ## the golden ratio \nsr &lt;- (1 + sqrt(2)) ##. lesser known silver ratio\neuler_num &lt;- exp(1)\n\ndf_long &lt;- df |&gt; expand_grid(r=r_values) |&gt;\n  mutate(r_var=r*(idx%%sr)+1) ## I'm experimenting here with modulo with pi \n\n\n\n\n\n\nCartesian Coordinates: The Baseline\nHere’s the unaltered design using coord_fixed, maintaining regular Cartesian coordinates.\n\n\nCode\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  #coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nEntering the World of Distortion\n\nPseudo-Log Transformation\nWarping begins with using pseudo_log transformation with coord_trans creates an intriguing distortion:\n\n\nCode\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nCustom Fisheye Transformation\nInspired by radial distortion formula, I’ve attempt to write a custom fisheye transformation.\nk controls the intensity of the distortion.\n\nPositive k = Barrel Distortion (like Fisheye)\nNegative k = Pincusion Distortion (Inverse Fisheye).\nr’ is pronouced as “r prime” \\[\nr′=r⋅(1+k*r^2)\n\\] Here’s the implementation:\n\n\n\nCode\nlibrary(scales)\n\n# Define a fisheye transformation using trans_new\nfisheye_trans &lt;- function(k = 0.01) {\n  trans_new(\n    name = \"fisheye\",\n    transform = function(r) r * (1 + k * r^2),        # Forward transformation\n    inverse = function(r_prime) r_prime / (1 + k * r_prime^2)  # Inverse transformation\n  )\n}\n\n# Create the fisheye transformation object\nfisheye &lt;- fisheye_trans(k = 0.03)\n\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  #coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  coord_trans(x=fisheye, y=fisheye) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\nThe result didn’t quite meet my expectations.. 😅🥹, but it’s a start…!\n\n\n\nExperimenting with Modulus Transformation in scales package 📦\nI also explored transformations like modulus, which yielded effects closer to the fish-eye look I envisioned:\n\n\nCode\n# Define the modulus transformation with a specific parameter (e.g., p = 0.5)\nmod_trans_y &lt;- modulus_trans(p = 0.01)\n\n\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=mod_trans_y ,y=mod_trans_y ,clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nCode\nmod_trans_x &lt;- modulus_trans(p = 1.5)\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=mod_trans_x ,y=mod_trans_y ,clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nFinal Thoughts\nExperimenting with warping in ggplot2 opens up a playful avenue for some quirky visualizations. I’m now thinking what to distort next!",
    "crumbs": [
      "About",
      "Posts",
      "Fish-Eye Lens Effect with ggplot2"
    ]
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Creating a Seigaha Motif with ggplot2",
    "section": "",
    "text": "The Seigaiha (青海波) motif, literally translated as “blue ocean waves” is a classic Japanese pattern used in textiles, ceramics, kimono and art. It features stylized waves created with concentric circles forming arches. I just learned that it symbolizes surges of good luck - delightful and thought great start to have it for blog post.\n\n青 = Blue\n海 = Ocean\n波 = Wave\n\nUsing ggplot2 and additional packages like ggforce and cowplot, I was able to recreate this timeless design programmatically.\n\n\nFirst need to load up the required libraries. Recently, I discovered package called annotater , which let you add annotation to the packages you use in script! It’s such a useful tool - future me (and anyone collaborating on my code) will likely thank me for using it.\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\ncol10 &lt;- str_split(\"012a4a-013a63-01497c-014f86-2a6f97-2c7da0-468faf-61a5c2-89c2d9-a9d6e5\",\"-\")\n\ncol10_pal &lt;-str_c(\"#\",col10 |&gt; unlist())\n\n\n\n\n\nWe create a grid of coordinates to serve as the base for our motif. To archieve the characteristic offset of Seigaiha waves, we adjust the x coordinates for odd rows:\n\n\nCode\ndf &lt;- expand_grid(x = seq(-16, 16, by = 2), \n                  y = seq(-10, 10, by = 1)) |&gt;\n  arrange(y,x) |&gt;\n  mutate(y_odd=(y%%2==1)) |&gt;\n  mutate(idx=row_number()-1) |&gt;\n  mutate(x=if_else(y_odd,x+1,x))\n\n\n\n\n\nThe radii of the circles vary in five steps. It could be smaller or larger. I could’ve also add randomness to it too, but I just kept it constant for now.\n\n\nCode\nr_values &lt;- seq(0.3,1.1,length.out=5)\ndf_long &lt;- df |&gt; expand_grid(r=r_values)\n\n\ndf_long &lt;- df_long |&gt;\n  mutate(r_var=if_else(idx%%5==0,sqrt(r),r))\n\n#range(df_long$x)\n#range(df_long$y)\n\ndf_long |&gt; head() |&gt; gt()\n\n\n\n\n\n\n\n\nx\ny\ny_odd\nidx\nr\nr_var\n\n\n\n\n-16\n-10\nFALSE\n0\n0.3\n0.5477226\n\n\n-16\n-10\nFALSE\n0\n0.5\n0.7071068\n\n\n-16\n-10\nFALSE\n0\n0.7\n0.8366600\n\n\n-16\n-10\nFALSE\n0\n0.9\n0.9486833\n\n\n-16\n-10\nFALSE\n0\n1.1\n1.0488088\n\n\n-14\n-10\nFALSE\n1\n0.3\n0.3000000\n\n\n\n\n\n\n\n\n\n\nUsing geom_circle from ggforce, we layer circles over the grid. We map the fill colour to the adjusted radius (r_var) for a slight gradeient effect:\n\n\nCode\ndf_long |&gt;\n  arrange(-y, idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(\n    aes(\n      x0 = x,\n      y0 = y,\n      r = r,\n      fill = r_var ## just wanted to give bit of variance\n    ),\n    linewidth = 0.1,\n    color = \"#fffff3de\",\n    linetype = 3\n  ) +\n  coord_fixed(clip = \"on\",\n              xlim = c(-15, 14.5),\n              ylim = c(-9, 9)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors = col10_pal) +\n  scale_color_gradientn(colors = col10_pal)\n\n\n\n\n\n\n\n\n\n\n\n\nThe theme_nothing() from cowplot removes all unnecessary visual elements (axes, labels etc.), leaving only the motif. I’ve adjusted xlim and ylim so that I’m clipping out the extra circles.",
    "crumbs": [
      "About",
      "Posts",
      "Creating a Seigaha Motif with ggplot2"
    ]
  },
  {
    "objectID": "posts/post-with-code/index.html#seigaiha-青海波",
    "href": "posts/post-with-code/index.html#seigaiha-青海波",
    "title": "Creating a Seigaha Motif with ggplot2",
    "section": "",
    "text": "The Seigaiha (青海波) motif, literally translated as “blue ocean waves” is a classic Japanese pattern used in textiles, ceramics, kimono and art. It features stylized waves created with concentric circles forming arches. I just learned that it symbolizes surges of good luck - delightful and thought great start to have it for blog post.\n\n青 = Blue\n海 = Ocean\n波 = Wave\n\nUsing ggplot2 and additional packages like ggforce and cowplot, I was able to recreate this timeless design programmatically.\n\n\nFirst need to load up the required libraries. Recently, I discovered package called annotater , which let you add annotation to the packages you use in script! It’s such a useful tool - future me (and anyone collaborating on my code) will likely thank me for using it.\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\ncol10 &lt;- str_split(\"012a4a-013a63-01497c-014f86-2a6f97-2c7da0-468faf-61a5c2-89c2d9-a9d6e5\",\"-\")\n\ncol10_pal &lt;-str_c(\"#\",col10 |&gt; unlist())\n\n\n\n\n\nWe create a grid of coordinates to serve as the base for our motif. To archieve the characteristic offset of Seigaiha waves, we adjust the x coordinates for odd rows:\n\n\nCode\ndf &lt;- expand_grid(x = seq(-16, 16, by = 2), \n                  y = seq(-10, 10, by = 1)) |&gt;\n  arrange(y,x) |&gt;\n  mutate(y_odd=(y%%2==1)) |&gt;\n  mutate(idx=row_number()-1) |&gt;\n  mutate(x=if_else(y_odd,x+1,x))\n\n\n\n\n\nThe radii of the circles vary in five steps. It could be smaller or larger. I could’ve also add randomness to it too, but I just kept it constant for now.\n\n\nCode\nr_values &lt;- seq(0.3,1.1,length.out=5)\ndf_long &lt;- df |&gt; expand_grid(r=r_values)\n\n\ndf_long &lt;- df_long |&gt;\n  mutate(r_var=if_else(idx%%5==0,sqrt(r),r))\n\n#range(df_long$x)\n#range(df_long$y)\n\ndf_long |&gt; head() |&gt; gt()\n\n\n\n\n\n\n\n\nx\ny\ny_odd\nidx\nr\nr_var\n\n\n\n\n-16\n-10\nFALSE\n0\n0.3\n0.5477226\n\n\n-16\n-10\nFALSE\n0\n0.5\n0.7071068\n\n\n-16\n-10\nFALSE\n0\n0.7\n0.8366600\n\n\n-16\n-10\nFALSE\n0\n0.9\n0.9486833\n\n\n-16\n-10\nFALSE\n0\n1.1\n1.0488088\n\n\n-14\n-10\nFALSE\n1\n0.3\n0.3000000\n\n\n\n\n\n\n\n\n\n\nUsing geom_circle from ggforce, we layer circles over the grid. We map the fill colour to the adjusted radius (r_var) for a slight gradeient effect:\n\n\nCode\ndf_long |&gt;\n  arrange(-y, idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(\n    aes(\n      x0 = x,\n      y0 = y,\n      r = r,\n      fill = r_var ## just wanted to give bit of variance\n    ),\n    linewidth = 0.1,\n    color = \"#fffff3de\",\n    linetype = 3\n  ) +\n  coord_fixed(clip = \"on\",\n              xlim = c(-15, 14.5),\n              ylim = c(-9, 9)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors = col10_pal) +\n  scale_color_gradientn(colors = col10_pal)\n\n\n\n\n\n\n\n\n\n\n\n\nThe theme_nothing() from cowplot removes all unnecessary visual elements (axes, labels etc.), leaving only the motif. I’ve adjusted xlim and ylim so that I’m clipping out the extra circles.",
    "crumbs": [
      "About",
      "Posts",
      "Creating a Seigaha Motif with ggplot2"
    ]
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Hello World! The First Post!",
    "section": "",
    "text": "Every great journey begins with a single step—or in this case, a single post. Really I’m just trying to learn how to use Quarto…\n\n\nThe blog name is a nod to my love of mystery, discovery, and exploration. Data can be like an unsolved case—full of patterns, stories, and hidden gems waiting to be uncovered.\n\n\n\nX-Files\n\n\n\n\n\nIn the Chi-Files, every dataset is a puzzle, and the chi-square statistic is our investigative tool to uncover hidden relationships.\nThe formula for the chi-square statistic is:\n\\[\n\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\n\\]\nWhere: - \\(O_i\\) = Observed frequency - \\(E_i\\) = Expected frequency - \\(\\sum\\) = The summation symbol, meaning we sum across all categories.\n\n\n\nSuppose we’re investigating sightings of UFOs 👽 across regions:\n\n\n\n\n\n\n\n\nRegion\nObserved Sightings (\\(O_i\\))\nExpected Sightings (\\(E_i\\))\n\n\n\n\nArea 51\n50\n40\n\n\nRoswell\n70\n60\n\n\nPine Gap\n30\n50\n\n\n\nUsing the chi-square formula, we calculate:\n\\[\n\\chi^2 = \\frac{(50 - 40)^2}{40} + \\frac{(70 - 60)^2}{60} + \\frac{(30 - 50)^2}{50}\n\\]\nThis leads to:\n\\[\n\\chi^2 = \\frac{100}{40} + \\frac{100}{60} + \\frac{400}{50} = 2.5 + 1.67 + 8 = 12.17\n\\]\nIf this value exceeds the critical value, we may conclude there’s something strange going on in these regions… but the truth is out there! 🛸\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe chi-square test reveals mysteries hidden in plain data. Use it wisely, and remember: the truth is out there! 🛸\n\n\nVisit Quarto",
    "crumbs": [
      "About",
      "Posts",
      "Hello World! The First Post!"
    ]
  },
  {
    "objectID": "posts/welcome/index.html#welcome-to-the-chi-files",
    "href": "posts/welcome/index.html#welcome-to-the-chi-files",
    "title": "Hello World! The First Post!",
    "section": "",
    "text": "Every great journey begins with a single step—or in this case, a single post. Really I’m just trying to learn how to use Quarto…\n\n\nThe blog name is a nod to my love of mystery, discovery, and exploration. Data can be like an unsolved case—full of patterns, stories, and hidden gems waiting to be uncovered.\n\n\n\nX-Files\n\n\n\n\n\nIn the Chi-Files, every dataset is a puzzle, and the chi-square statistic is our investigative tool to uncover hidden relationships.\nThe formula for the chi-square statistic is:\n\\[\n\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\n\\]\nWhere: - \\(O_i\\) = Observed frequency - \\(E_i\\) = Expected frequency - \\(\\sum\\) = The summation symbol, meaning we sum across all categories.\n\n\n\nSuppose we’re investigating sightings of UFOs 👽 across regions:\n\n\n\n\n\n\n\n\nRegion\nObserved Sightings (\\(O_i\\))\nExpected Sightings (\\(E_i\\))\n\n\n\n\nArea 51\n50\n40\n\n\nRoswell\n70\n60\n\n\nPine Gap\n30\n50\n\n\n\nUsing the chi-square formula, we calculate:\n\\[\n\\chi^2 = \\frac{(50 - 40)^2}{40} + \\frac{(70 - 60)^2}{60} + \\frac{(30 - 50)^2}{50}\n\\]\nThis leads to:\n\\[\n\\chi^2 = \\frac{100}{40} + \\frac{100}{60} + \\frac{400}{50} = 2.5 + 1.67 + 8 = 12.17\n\\]\nIf this value exceeds the critical value, we may conclude there’s something strange going on in these regions… but the truth is out there! 🛸\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe chi-square test reveals mysteries hidden in plain data. Use it wisely, and remember: the truth is out there! 🛸\n\n\nVisit Quarto",
    "crumbs": [
      "About",
      "Posts",
      "Hello World! The First Post!"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CHI(χ)-Files",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nFish-Eye Lens Effect with ggplot2\n\n\n\n\n\n\nDecember 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Seigaha Motif with ggplot2\n\n\n\n\n\n\nDecember 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHello World! The First Post!\n\n\nAn introduction to the Chi-Files blog and its exciting journey trying to learn Quarto.\n\n\n\nDecember 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]