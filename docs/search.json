[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "🌌 Welcome to the Chi(χ)-Files!\nThis blog follows my data adventures, tech explorations, and creative thinking. 💧\n\n\n🧑‍💻 Who Am I?\nI’m a Data Visualization Specialist whose work spans data science, analytics, and storytelling. I aim to transform raw data into meaningful insights that drive better decision making. I fell in love exploring data using R (with extra special love 💕 for ggplot2), I also love tinkering with SQL, Databricks, as well as utilizing ordinary Microsoft PowerPoints as dynamic storytelling platforms.\n\n\n🫣A Few Fun Facts\n\n🐱 I lean towards more like “cat”—independent, curious, and always exploring, taking pleasure in discoveries.\n🐶 That said, if asked, I’m a dog person. Dogs hold a special place in my heart ❤️, and my furry friend is my constant companion.\n🌊 I’m captivated by waves—from the rolling ocean swells to the invisible rhythms of radio frequencies. I am drawn to patterns especially geometric ones, not simply waves.\n🛸 The name “Chi(χ)-Files” represents my passion for mystery, adventure, and the unknown.\n\n\n\n✍️ Why This Blog?\nThis space showcases my discoveries in data, visualization, and technology. Here you’ll find some professional insights, personal reflections, and likely more of odd creative projects utilizing R in some way. 🎨📊\nThis blog aims to inspire, demonstrating how data can be both functional and beautiful, analytical and artistic. 💡\n\n\n🌊 Join the Journey\nFeel free to explore, share, and connect. Whether you’re a data enthusiast, a curious learner, or seeking inspiration, I hope the Chi-Files resonates with you."
  },
  {
    "objectID": "posts/2024_12/calendar_generator.html",
    "href": "posts/2024_12/calendar_generator.html",
    "title": "Visualizing 445 Calendar in R",
    "section": "",
    "text": "Have You Heard of the 4-4-5 Calendar? 📆\nIf you’ve worked in retail, you might already know that time isn’t always measured in standard months. Enter the 4-4-5 calendar: a reporting tool that divides a year into 12 periods, each organized into quarters of 4, 4, and 5 weeks (i.e. 13 weeks in each quarter). This structure ensures comparability across years by standardizing the length of each reporting period. (But yes, this isn’t perfect either—every 5-6 years, this produces a year with 53 weeks.)\n\n\nWhy Use a 4-4-5 Calendar?\nStandard Gregorian calendars often lead to reporting headaches🤕, especially when months have varying lengths or different counts of weekends. The 4-4-5 calendar solves this by:\n\nAligning periods to weeks, making year-over-year comparisons simpler.\nStandardizing reporting cycles, especially for weekly-driven industries like retail.\nProviding flexibility with alternative formats, such as the 4-5-4 calendar, for specific business needs.\n\nThere’s also a sibling version👧🏻, the 4-5-4 calendar, which I personally prefer because it ensures that American Thanksgiving 🦃🎁 always falls within Period 11. In contrast, the 4-4-5 calendar may place Thanksgiving in Period 11 or 12, depending on the year.\n\n\nBuilding a Custom 4-4-5 Calendar in R\nTo create a reusable tool, I developed the create_calendar function. This function takes a year and a calendar type (“445” or “454”) and returns a detailed tibble with dates, weeks, periods, and quarters. Function takes the year, and returns calendar as data frame.\n\n\nCreate Calendar Function\ncreate_calendar &lt;- function(year, calendar_type = \"445\", col_pal = NULL, ...) {\n  if (is.null(col_pal)) {\n    col_pal &lt;- ggthemes::tableau_color_pal(\"Hue Circle\")(19)[c(1:13)]\n  }\n  \n  cal &lt;- tibble(\n    dt = seq.Date(ymd(paste0(year-1, \"-12-01\")), ymd(paste0(year, \"-12-31\")), by = \"day\")\n  )\n  \n  wpq &lt;- switch(calendar_type,\n                \"445\" = tibble(\n                  wk = 1:53,\n                  p = sort(c(rep(1:12, each = 4), c(3, 6, 9, 12, 12))),\n                  q = sort(c(rep(1:4, each = 13), c(4)))\n                ),\n                \"454\" = tibble(\n                  wk = 1:53,\n                  p = sort(c(rep(1:12, each=4), c(2, 5, 8, 11, 12))),\n                  q = sort(c(rep(1:4, each = 13), c(4)))\n                ),\n                stop(\"Invalid calendar type. Choose '445' or '454'.\")\n  )\n  \n  cal &lt;- cal |&gt;\n    mutate(\n      yr = isoyear(dt),\n      wk = isoweek(dt),\n      wday = wday(dt, label = TRUE,week_start = getOption(\"lubridate.week.start\", 1))\n    ) |&gt;\n    left_join(wpq, by = \"wk\") |&gt;\n    mutate(color_num=wk + p + q) |&gt;\n    mutate(color_wk = colourvalues::color_values(color_num, \n                                                 palette=farver::decode_colour(col_pal))) |&gt;\n    filter(yr==year)\n  \n  return(cal)\n}\n\n\n\n\nMaking the Visual Calendar\nUsing ggplot2, we can create a visual representation of the calendar. The plot organizes weeks within periods and highlights each period in a grid layout.\nI’ve turned this ggplot2 as another function.\n\n\nPlot Calendar Function\nplot_calendar &lt;- function(cal) {\n  cal |&gt;\n    ggplot(aes(x=wday,y=color_num)) +\n    geom_tile(aes(fill=I(color_wk)), color=\"#ffffffde\") +\n    geom_text(aes(label=day(dt),\n                  color=I(if_else(month(dt)==p,\"#ffffff\",\"#e3e3e3\"))),  \n              family=\"Roboto Condensed\") +\n    geom_text(aes(label=str_c(\"W\",wk),color=I(color_wk),x=0),\n              family=\"Roboto Condensed\", \n              data = . %&gt;% count(wk,color_num,color_wk,p,q))+\n    geom_blank(aes(x=-1)) +\n    scale_y_reverse(breaks=NULL) +\n    scale_x_discrete(labels=~str_sub(.,1L,2L)) +\n    facet_wrap(~p,ncol=3, scales=\"free\") +\n    cowplot::theme_minimal_grid(font_family=\"Roboto Condensed\",line_size=0) +\n    labs(x=\"\",y=\"\")\n}\n\n\n\n2025 - 445 🗓️2025 - 454 🗓️2024 - 445 🗓️2024 - 445 🗓️\n\n\n\n\nCode\ncreate_calendar(year=2025, calendar_type=\"445\") |&gt;\n  plot_calendar()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_calendar(year=2025, calendar_type=\"454\") |&gt;\n  plot_calendar()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_calendar(year=2024, calendar_type=\"445\") |&gt;\n  plot_calendar()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_calendar(year=2024, calendar_type=\"454\") |&gt;\n  plot_calendar()\n\n\n\n\n\n\n\n\n\n\n\n\nWhile the 4-4-5 calendar does simplifies retail reporting, timekeeping isn’t always that straightforward. I’ve taken things up a notch and explore how sunlight, time zones, and Daylight Saving Time adds extra complexity.\n\n\nUp the Complication of Timekeeping by a Few Notches\nAt first glance, keeping track of time seems simple 💡—but dig deeper, and it’s anything but. Add time zones, daylight saving time (DST), and patterns of sunlight to the mix, and you’ve just cranked the complexity up to expert mode. 😅\nI don’t think I’ve solved this puzzle perfectly yet, but here’s my attempt using R’s suncalc package to visualize sunlight data alongside our trusty 4-4-5 calendar.\n\n\nSunlight Length Plot Creation\n## install.package if you don't have it installed.  \nlibrary(suncalc)\n\n# Predefined city list with lat/lon & timezones.  \n# To see full listing of available timezones, OlsonNames()\n\n### Creation of cities tibble\ncities &lt;- tibble(\n  city = c(\n    \"Vancouver\", \"Toronto\", \"New York\", \"Chicago\", \"Los Angeles\", \n    \"Tokyo\", \"Paris\", \"London\", \"Munich\",\n    \"Sydney\", \"Mumbai\", \"Cape Town\", \"Moscow\", \"São Paulo\",\n    \"Denpasar\", \"Lima\", \"Dubai\", \"Bangkok\", \"Istanbul\",\n    \"Reykjavik\", \"Tromsø\", \"Buenos Aires\", \"Cairo\", \"Anchorage\"\n  ),\n  country = c(\n    \"Canada\", \"Canada\", \"United States\", \"United States\", \"United States\",\n    \"Japan\", \"France\", \"United Kingdom\", \"Germany\",\n    \"Australia\", \"India\", \"South Africa\", \"Russia\", \"Brazil\",\n    \"Indonesia\", \"Peru\", \"United Arab Emirates\", \"Thailand\", \"Turkey\",\n    \"Iceland\", \"Norway\", \"Argentina\", \"Egypt\", \"United States\"\n  ),\n  lat = c(\n    49.246292, 43.65107, 40.712776, 41.878113, 34.052235, \n    35.689487, 48.856613, 51.507222, 48.135124,\n    -33.868820, 19.076090, -33.924870, 55.755825, -23.550520,\n    -8.650000, -12.046374, 25.276987, 13.756331, 41.008240,\n    64.1466, 69.6496, -34.603722, 30.044420, 61.218056\n  ),\n  lon = c(\n    -123.116226, -79.347015, -74.005974, -87.629799, -118.243683, \n    139.691711, 2.352222, -0.1275, 11.581981,\n    151.209290, 72.877426, 18.424055, 37.617298, -46.633308,\n    115.216667, -77.042793, 55.296249, 100.501762, 28.978359,\n    -21.9426, 18.9560, -58.3816, 31.2357, -149.900278\n  ),\n  tz = c(\n    \"America/Vancouver\", \"America/Toronto\", \"America/New_York\", \"America/Chicago\", \n    \"America/Los_Angeles\", \"Asia/Tokyo\", \"Europe/Paris\", \"Europe/London\", \n    \"Europe/Berlin\", \"Australia/Sydney\", \"Asia/Kolkata\", \"Africa/Johannesburg\", \n    \"Europe/Moscow\", \"America/Sao_Paulo\", \"Asia/Makassar\", \"America/Lima\", \n    \"Asia/Dubai\", \"Asia/Bangkok\", \"Europe/Istanbul\",\n    \"Atlantic/Reykjavik\", \"Europe/Oslo\", \"America/Argentina/Buenos_Aires\", \n    \"Africa/Cairo\", \"America/Anchorage\"\n  )\n)\n\n\n\n# Generalized function \nvisualize_sunlight &lt;- function(city_name, year) {\n  # Find city details\n  #city_name &lt;- (\"Vancouver, BC\")\n  #year &lt;- 2025\n  city &lt;- cities %&gt;% filter(city == city_name)\n  if (nrow(city) == 0) stop(\"City not found in predefined list.\")\n  \n  # Get sunlight data for the year\n  \n  sunlight_data &lt;- create_calendar(year = year) %&gt;%\n    pull(dt) %&gt;%\n    map_dfr(~ getSunlightTimes(date = ., lat = city$lat, lon = city$lon, tz = city$tz)) %&gt;%\n    as_tibble()  %&gt;%\n    mutate(\n      daylight_dur = as.duration(sunrise %--% sunset),\n      across(where(is.POSIXct), \n             list(time = ~ lubridate::hms(format(ymd_hms(.), \"%H:%M:%S\"))))\n    )\n  \n  # Add calendar columns\n  sunlight_data &lt;- sunlight_data %&gt;% bind_cols(create_calendar(year = year))\n  \n  # Summarise by Period\n  p_summary &lt;- sunlight_data |&gt;\n  group_by(p) |&gt;\n  summarise(\n    across(c(dt:color_num), list(min = ~min(.), max = ~max(.))),\n    avg_dur = mean(daylight_dur)\n  ) |&gt;\n  mutate(\n    avg_dur_seconds = as.numeric(avg_dur),  # Convert duration to seconds\n    avg_dur_hours = avg_dur_seconds / 3600,  # Convert seconds to hours\n    descr = str_glue(\n      \"P{p}\\n{format(dt_min, '%Y %b %e')} - {format(dt_max, '%Y %b %e')}\\n\",\n      \"Avg Daylight: {round(avg_dur_hours, 2)} hours\"\n    )\n  ) |&gt;\n  relocate(p, descr)\n  \n  # Detect DST start and end\n  dst_info &lt;- tibble(\n    date = sunlight_data$date,\n    is_dst = with_tz(ymd_hms(paste(date, \"00:00:00\")), tzone = city$tz) %&gt;% dst()\n  ) %&gt;% filter(is_dst) %&gt;%\n    filter(max(date)==date|min(date)==date)\n  \n  # Dynamically create subtitle\n  if (nrow(dst_info) == 0) {\n    subtitle &lt;- \"This location does not observe Daylight Saving Time (DST).\"\n  } else {\n    dst_start &lt;- if_else(city$lat&gt;0,min(dst_info$date),max(dst_info$date))\n    dst_end &lt;- if_else(city$lat&gt;0,max(dst_info$date),min(dst_info$date))\n    subtitle &lt;- str_glue(\"DST Starts: {format(dst_start, '%b %e %a (Week %V)')} | DST Ends: {format(dst_end, '%b %e %a (Week %V)')}\")\n  }\n  \n  # Generate the plot\n  ggplot(sunlight_data, aes(x = as.numeric(color_num) + as.numeric(wday) / 7)) +\n    geom_ribbon(aes(ymin = dawn_time, ymax = dusk_time, fill = I(colorspace::lighten(color_wk, 0.7)))) +\n    geom_ribbon(aes(ymin = sunrise_time, ymax = sunset_time, fill = I(color_wk))) +\n    geom_line(aes(y = solarNoon_time), linetype = 3) +\n    scale_x_continuous(breaks = NULL) +\n    cowplot::theme_minimal_vgrid(font_family = \"Roboto Condensed\") +\n    geom_hline(yintercept = max(as.numeric(sunlight_data$sunrise_time)), color = \"black\", linetype = 3) +\n    geom_hline(yintercept = min(as.numeric(sunlight_data$sunrise_time)), color = \"black\", linetype = 3) +\n    geom_hline(yintercept = max(as.numeric(sunlight_data$sunset_time)), color = \"black\", linetype = 3) +\n    geom_hline(yintercept = min(as.numeric(sunlight_data$sunset_time)), color = \"black\", linetype = 3) +\n    scale_y_continuous(\n      labels = ~ hms::as_hms(.),\n      breaks = seq(0, 24 * 3600, by = 3600), # Hourly breaks\n      limits = c(0, 24 * 3600)\n    ) +\n    labs(\n      x = \"\",\n      y = \"\",\n      title = str_glue(\"Sunlight Duration for {city_name} {city$country} ({year}) - 445 Calendar\"),\n      subtitle = subtitle\n    ) +\n    geom_label(aes(x=color_num_min, \n                  y=avg_dur_seconds, label=str_c(\"P\",p,\"\\navg\\n\", round(avg_dur_hours,1),\"\\nhrs\")),\n              data = p_summary, family=\"Roboto Condensed\", \n              lineheight=0.8, hjust=0, fill=\"#ffffff50\")\n}\n\n\n\nVancouver 🇨🇦New York 🇺🇸Munich 🇩🇪Tromsø 🇳🇴Sydney 🇦🇺Tokyo 🇯🇵Denpasar 🇮🇩Cairo 🇪🇬\n\n\nVancouver 🇨🇦🌲⛰️ Daylight Saving Time: DST is observed from March to November. Summer days are long (about 16 hours) while winter days are short (about 8 hours). 👩🏻‍🏫 There are more than twice as many daylight hours on the summer solstice than on the winter one.\n\n\nCode\nvisualize_sunlight(\"Vancouver\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nNew York 🇺🇸🗽🏙 Daylight Saving Time: DST is observed from March to November, just like Vancouver. About 15 hours in the summer and about 9.4 hours in the winter, New York’s patterns are slightly less pronounced than Vancouver’s but still notable.\n\n\nCode\nvisualize_sunlight(\"New York\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nMunich 🇩🇪🍺🏰 Daylight Saving Time: Commences in late March and concludes in late October. Sunlight: Summer days last approximately 16 hours, while winter days last approximately 8.5 hours.\n\n\nCode\nvisualize_sunlight(\"Munich\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nTromsø 🇳🇴❄️🌌 **Tromsø’s graph below is broken due to the sun setting after midnight during the summer (a phenomenon called the midnight sun), and I didn’t think through on these edge cases while creating ggplot2!\nDaylight Saving: Starts last Sunday in March, ends last Sunday in October in Norway. That said, Tromsø (and other places in the Arctic Circle) experience midnight sun and polar night - So DST has no actual practical effect??!\n\n\nCode\nvisualize_sunlight(\"Tromsø\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nSydney 🇦🇺🌊🐨 Daylight Saving: Starts first Sunday in October, ends first Sunday in April as seen on the glitch on visual below. I didn’t quite get the extraction of DST accurately in my function, so subtitle still isn’t accurate… 😅 🙀Another interesting thing I learned is that Not all states observe DST in Australia 🇦🇺! This creates a patchwork of timezones during the summer in Australia!\n\n\nCode\nvisualize_sunlight(\"Sydney\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nTokyo 🇯🇵🏙️🌸 Daylight Saving: Japan doesn’t observe DST (Since 1952). Most of Japan experiences consistent sunrise and sunset times throughout the year, making DST less beneficial.\n\n\nCode\nvisualize_sunlight(\"Tokyo\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nDenpasar 🇮🇩🌴🌊 Like the rest of Indonesia, Bali does not observe DST. The daylight time remains constant throughout the year due to its tropical, equatorial location thoughout the year. So there’s really no need for DST.\n\n\nCode\nvisualize_sunlight(\"Denpasar\", 2025)\n\n\n\n\n\n\n\n\n\n\n\nCairo 🇪🇬🕌🐪 Daylight Saving: Unlike Canada or US, DST transition occurs on Friday in Late April and Thursdays in Late October, instead of more typical Sunday.\n\n\nCode\nvisualize_sunlight(\"Cairo\", 2025)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhere are these cities?\nHere’s a map of the cities I’ve picked in above.\n\n\nInteractive Leaflet Map Code\nlibrary(leaflet)\n\ncities |&gt; \n  filter(city %in% c(\"Tokyo\",\"Denpasar\",\"Vancouver\",\"New York\",\"Munich\",\"Sydney\",\"Cairo\",\"Tromsø\")) |&gt;\n  leaflet() |&gt;\n  addProviderTiles(\"CartoDB.DarkMatter\") |&gt;\n  addMarkers(\n    label = ~city,\n    popup = ~map(paste0(\n    \"&lt;b&gt;\", city, \", \",country, \"&lt;/b&gt;&lt;br&gt;\",\n    \"Lat: \", round(lat, 2), \"&lt;br&gt;\",\n    \"Lon: \", round(lon, 2)\n  ), htmltools::HTML\n  ),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"bold\", \"color\" = \"white\"),\n      direction = \"auto\",\n      textsize = \"12px\",\n      noHide = TRUE,\n      textOnly = TRUE,\n      sticky = TRUE\n    )\n  )\n\n\n\n\n\n\n\n\nTimekeeping: A Rabbit Hole Worth Falling Into 🐰🕳️\nWhat started as a simple exploration of the 4-4-5 calendar turned into a wild ride through the quirks of time—daylight saving oddities, cultural twists, and even the midnight sun.\nI love these “useless trivias,” but they’re a reminder that time isn’t just ticking numbers on a clock—it’s shaped by geography, culture, and sometimes even political drama. This was a fun wake-up call (pun intended) that time is more complex, and entertaining? than we think!!"
  },
  {
    "objectID": "posts/2024_12/index.html",
    "href": "posts/2024_12/index.html",
    "title": "Fish-Eye Lens Effect with ggplot2",
    "section": "",
    "text": "Fascination with “Warping” …\nThe “fish-eye” lens has always fascinated me. It was my gateway into photography—its quirky, distorted charm never failed to add whimsy to my shots. Some of my favourite memories are capturing our furry friends🐶🐽🐄.\nRecently, I started wondering why not bring that same fish-eye🐟👁️ magic into my data visualizations. While it may not suit business dashboards, it’s perfect for artistic visualizations. With ggplot2’s coord_trans() and its \"pseudo_log\" transformation as inspiration, I decied to push the boundaries and create my first custom transformation.\n\n\nDigression : The Seigaha Motif as a Canvas 🎨\nTo test this idea, I used a Seigaha motif I created the other day. It’s a geometric design with overlapping circles that naturally lends itself to experimentation. I introduced randomness to the colors using irrational numbers as denominators, leveraging R’s modulo operation for real numbers. Just another attempt at creating “pseudo-randomness” in the design.\n\\[\nx \\mod y = x - \\text{floor}\\left(\\frac{x}{y}\\right) \\times y\n\\]\n\nFamous “Irrational” Numbers in Math\n\nGolden Ratio\nThe Golden Ratio is often represented by the Greek letter \\(\\phi\\) and is defined as: \\[\n\\phi = \\frac{1 + \\sqrt{5}}{2}\n\\]\n\n\nSilver Ratio\nThe lesser-known Silver Ratio, represented by \\(\\delta_s\\), is defined as: \\[\n\\delta_s = 1 + \\sqrt{2}\n\\]\n\n\nEuler’s Number\nEuler’s number, represented by \\(e\\), is a fundamental constant in mathematics: \\[\ne = \\exp(1)\n\\] It is approximately \\(e \\approx 2.718\\).\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\n### just declaring the colour palette here\ncol10 &lt;- str_split(\"001219-005f73-0a9396-94d2bd-e9d8a6-ee9b00-ca6702-bb3e03-ae2012-9b2226\",\"-\")\ncol10_pal &lt;-str_c(\"#\",col10 |&gt; unlist())\n\n### Creating data frame that is basis of layout\ndf &lt;- expand_grid(x = seq(-12, 12, by = 2), \n                  y = seq(-8, 8, by = 1)) |&gt;\n  arrange(y,x) |&gt;\n  mutate(y_odd=(y%%2==1)) |&gt;\n  mutate(idx=row_number()-1) |&gt;\n  mutate(x=if_else(y_odd,x+1,x))\n\n### For each grid location, I want 6 concentric circles\nr_values &lt;- seq(0.1,1,length.out=6)\n\n### Just defining some \"Irregular Numbers\" that I can use with Modulo \ngr &lt;- (1 + sqrt(5)) / 2 ## the golden ratio \nsr &lt;- (1 + sqrt(2)) ##. lesser known silver ratio\neuler_num &lt;- exp(1)\n\ndf_long &lt;- df |&gt; expand_grid(r=r_values) |&gt;\n  mutate(r_var=r*(idx%%sr)+1) ## I'm experimenting here with modulo with pi \n\n\n\n\n\n\nCartesian Coordinates: The Baseline\nHere’s the unaltered design using coord_fixed, maintaining regular Cartesian coordinates.\n\n\nCode\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  #coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nEntering the World of Distortion\n\nPseudo-Log Transformation\nWarping begins with using pseudo_log transformation with coord_trans creates an intriguing distortion:\n\n\nCode\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nCustom Fisheye Transformation\nInspired by radial distortion formula, I’ve attempt to write a custom fisheye transformation.\nk controls the intensity of the distortion.\n\nPositive k = Barrel Distortion (like Fisheye)\nNegative k = Pincusion Distortion (Inverse Fisheye).\nr’ is pronouced as “r prime” \\[\nr′=r⋅(1+k*r^2)\n\\] Here’s the implementation:\n\n\n\nCode\nlibrary(scales)\n\n# Define a fisheye transformation using trans_new\nfisheye_trans &lt;- function(k = 0.01) {\n  trans_new(\n    name = \"fisheye\",\n    transform = function(r) r * (1 + k * r^2),        # Forward transformation\n    inverse = function(r_prime) r_prime / (1 + k * r_prime^2)  # Inverse transformation\n  )\n}\n\n# Create the fisheye transformation object\nfisheye &lt;- fisheye_trans(k = 0.03)\n\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  #coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  coord_trans(x=fisheye, y=fisheye) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\nThe result didn’t quite meet my expectations.. 😅🥹, but it’s a start…!\n\n\n\nExperimenting with Modulus Transformation in scales package 📦\nI also explored transformations like modulus, which yielded effects closer to the fish-eye look I envisioned:\n\n\nCode\n# Define the modulus transformation with a specific parameter (e.g., p = 0.5)\nmod_trans_y &lt;- modulus_trans(p = 0.01)\n\n\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=mod_trans_y ,y=mod_trans_y ,clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nCode\nmod_trans_x &lt;- modulus_trans(p = 1.5)\ndf_long |&gt;\n  arrange(-y,idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=mod_trans_x ,y=mod_trans_y ,clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n\n\n\n\n\n\n\n\n\n\n\nFinal Thoughts\nExperimenting with warping in ggplot2 opens up a playful avenue for some quirky visualizations. I’m now thinking what to distort next!"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Creating a Seigaha Motif with ggplot2",
    "section": "",
    "text": "The Seigaiha (青海波) motif, literally translated as “blue ocean waves” is a classic Japanese pattern used in textiles, ceramics, kimono and art. It features stylized waves created with concentric circles forming arches. I just learned that it symbolizes surges of good luck - delightful and thought great start to have it for blog post.\n\n青 = Blue\n海 = Ocean\n波 = Wave\n\nUsing ggplot2 and additional packages like ggforce and cowplot, I was able to recreate this timeless design programmatically.\n\n\nFirst need to load up the required libraries. Recently, I discovered package called annotater , which let you add annotation to the packages you use in script! It’s such a useful tool - future me (and anyone collaborating on my code) will likely thank me for using it.\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\ncol10 &lt;- str_split(\"012a4a-013a63-01497c-014f86-2a6f97-2c7da0-468faf-61a5c2-89c2d9-a9d6e5\",\"-\")\n\ncol10_pal &lt;-str_c(\"#\",col10 |&gt; unlist())\n\n\n\n\n\nWe create a grid of coordinates to serve as the base for our motif. To archieve the characteristic offset of Seigaiha waves, we adjust the x coordinates for odd rows:\n\n\nCode\ndf &lt;- expand_grid(x = seq(-16, 16, by = 2), \n                  y = seq(-10, 10, by = 1)) |&gt;\n  arrange(y,x) |&gt;\n  mutate(y_odd=(y%%2==1)) |&gt;\n  mutate(idx=row_number()-1) |&gt;\n  mutate(x=if_else(y_odd,x+1,x))\n\n\n\n\n\nThe radii of the circles vary in five steps. It could be smaller or larger. I could’ve also add randomness to it too, but I just kept it constant for now.\n\n\nCode\nr_values &lt;- seq(0.3,1.1,length.out=5)\ndf_long &lt;- df |&gt; expand_grid(r=r_values)\n\n\ndf_long &lt;- df_long |&gt;\n  mutate(r_var=if_else(idx%%5==0,sqrt(r),r))\n\n#range(df_long$x)\n#range(df_long$y)\n\ndf_long |&gt; head() |&gt; gt()\n\n\n\n\n\n\n\n\nx\ny\ny_odd\nidx\nr\nr_var\n\n\n\n\n-16\n-10\nFALSE\n0\n0.3\n0.5477226\n\n\n-16\n-10\nFALSE\n0\n0.5\n0.7071068\n\n\n-16\n-10\nFALSE\n0\n0.7\n0.8366600\n\n\n-16\n-10\nFALSE\n0\n0.9\n0.9486833\n\n\n-16\n-10\nFALSE\n0\n1.1\n1.0488088\n\n\n-14\n-10\nFALSE\n1\n0.3\n0.3000000\n\n\n\n\n\n\n\n\n\n\nUsing geom_circle from ggforce, we layer circles over the grid. We map the fill colour to the adjusted radius (r_var) for a slight gradeient effect:\n\n\nCode\ndf_long |&gt;\n  arrange(-y, idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(\n    aes(\n      x0 = x,\n      y0 = y,\n      r = r,\n      fill = r_var ## just wanted to give bit of variance\n    ),\n    linewidth = 0.1,\n    color = \"#fffff3de\",\n    linetype = 3\n  ) +\n  coord_fixed(clip = \"on\",\n              xlim = c(-15, 14.5),\n              ylim = c(-9, 9)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors = col10_pal) +\n  scale_color_gradientn(colors = col10_pal)\n\n\n\n\n\n\n\n\n\n\n\n\nThe theme_nothing() from cowplot removes all unnecessary visual elements (axes, labels etc.), leaving only the motif. I’ve adjusted xlim and ylim so that I’m clipping out the extra circles."
  },
  {
    "objectID": "posts/post-with-code/index.html#seigaiha-青海波",
    "href": "posts/post-with-code/index.html#seigaiha-青海波",
    "title": "Creating a Seigaha Motif with ggplot2",
    "section": "",
    "text": "The Seigaiha (青海波) motif, literally translated as “blue ocean waves” is a classic Japanese pattern used in textiles, ceramics, kimono and art. It features stylized waves created with concentric circles forming arches. I just learned that it symbolizes surges of good luck - delightful and thought great start to have it for blog post.\n\n青 = Blue\n海 = Ocean\n波 = Wave\n\nUsing ggplot2 and additional packages like ggforce and cowplot, I was able to recreate this timeless design programmatically.\n\n\nFirst need to load up the required libraries. Recently, I discovered package called annotater , which let you add annotation to the packages you use in script! It’s such a useful tool - future me (and anyone collaborating on my code) will likely thank me for using it.\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\ncol10 &lt;- str_split(\"012a4a-013a63-01497c-014f86-2a6f97-2c7da0-468faf-61a5c2-89c2d9-a9d6e5\",\"-\")\n\ncol10_pal &lt;-str_c(\"#\",col10 |&gt; unlist())\n\n\n\n\n\nWe create a grid of coordinates to serve as the base for our motif. To archieve the characteristic offset of Seigaiha waves, we adjust the x coordinates for odd rows:\n\n\nCode\ndf &lt;- expand_grid(x = seq(-16, 16, by = 2), \n                  y = seq(-10, 10, by = 1)) |&gt;\n  arrange(y,x) |&gt;\n  mutate(y_odd=(y%%2==1)) |&gt;\n  mutate(idx=row_number()-1) |&gt;\n  mutate(x=if_else(y_odd,x+1,x))\n\n\n\n\n\nThe radii of the circles vary in five steps. It could be smaller or larger. I could’ve also add randomness to it too, but I just kept it constant for now.\n\n\nCode\nr_values &lt;- seq(0.3,1.1,length.out=5)\ndf_long &lt;- df |&gt; expand_grid(r=r_values)\n\n\ndf_long &lt;- df_long |&gt;\n  mutate(r_var=if_else(idx%%5==0,sqrt(r),r))\n\n#range(df_long$x)\n#range(df_long$y)\n\ndf_long |&gt; head() |&gt; gt()\n\n\n\n\n\n\n\n\nx\ny\ny_odd\nidx\nr\nr_var\n\n\n\n\n-16\n-10\nFALSE\n0\n0.3\n0.5477226\n\n\n-16\n-10\nFALSE\n0\n0.5\n0.7071068\n\n\n-16\n-10\nFALSE\n0\n0.7\n0.8366600\n\n\n-16\n-10\nFALSE\n0\n0.9\n0.9486833\n\n\n-16\n-10\nFALSE\n0\n1.1\n1.0488088\n\n\n-14\n-10\nFALSE\n1\n0.3\n0.3000000\n\n\n\n\n\n\n\n\n\n\nUsing geom_circle from ggforce, we layer circles over the grid. We map the fill colour to the adjusted radius (r_var) for a slight gradeient effect:\n\n\nCode\ndf_long |&gt;\n  arrange(-y, idx, desc(r)) |&gt;\n  ggplot() +\n  geom_circle(\n    aes(\n      x0 = x,\n      y0 = y,\n      r = r,\n      fill = r_var ## just wanted to give bit of variance\n    ),\n    linewidth = 0.1,\n    color = \"#fffff3de\",\n    linetype = 3\n  ) +\n  coord_fixed(clip = \"on\",\n              xlim = c(-15, 14.5),\n              ylim = c(-9, 9)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors = col10_pal) +\n  scale_color_gradientn(colors = col10_pal)\n\n\n\n\n\n\n\n\n\n\n\n\nThe theme_nothing() from cowplot removes all unnecessary visual elements (axes, labels etc.), leaving only the motif. I’ve adjusted xlim and ylim so that I’m clipping out the extra circles."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Hello World! The First Post!",
    "section": "",
    "text": "Every great journey begins with a single step—or in this case, a single post. Really I’m just trying to learn how to use Quarto…\n\n\nThe blog name is a nod to my love of mystery, discovery, and exploration. Data can be like an unsolved case—full of patterns, stories, and hidden gems waiting to be uncovered.\n\n\n\nX-Files\n\n\n\n\n\nIn the Chi-Files, every dataset is a puzzle, and the chi-square statistic is our investigative tool to uncover hidden relationships.\nThe formula for the chi-square statistic is:\n\\[\n\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\n\\]\nWhere: - \\(O_i\\) = Observed frequency - \\(E_i\\) = Expected frequency - \\(\\sum\\) = The summation symbol, meaning we sum across all categories.\n\n\n\nSuppose we’re investigating sightings of UFOs 👽 across regions:\n\n\n\n\n\n\n\n\nRegion\nObserved Sightings (\\(O_i\\))\nExpected Sightings (\\(E_i\\))\n\n\n\n\nArea 51\n50\n40\n\n\nRoswell\n70\n60\n\n\nPine Gap\n30\n50\n\n\n\nUsing the chi-square formula, we calculate:\n\\[\n\\chi^2 = \\frac{(50 - 40)^2}{40} + \\frac{(70 - 60)^2}{60} + \\frac{(30 - 50)^2}{50}\n\\]\nThis leads to:\n\\[\n\\chi^2 = \\frac{100}{40} + \\frac{100}{60} + \\frac{400}{50} = 2.5 + 1.67 + 8 = 12.17\n\\]\nIf this value exceeds the critical value, we may conclude there’s something strange going on in these regions… but the truth is out there! 🛸\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe chi-square test reveals mysteries hidden in plain data. Use it wisely, and remember: the truth is out there! 🛸\n\n\nVisit Quarto"
  },
  {
    "objectID": "posts/welcome/index.html#welcome-to-the-chi-files",
    "href": "posts/welcome/index.html#welcome-to-the-chi-files",
    "title": "Hello World! The First Post!",
    "section": "",
    "text": "Every great journey begins with a single step—or in this case, a single post. Really I’m just trying to learn how to use Quarto…\n\n\nThe blog name is a nod to my love of mystery, discovery, and exploration. Data can be like an unsolved case—full of patterns, stories, and hidden gems waiting to be uncovered.\n\n\n\nX-Files\n\n\n\n\n\nIn the Chi-Files, every dataset is a puzzle, and the chi-square statistic is our investigative tool to uncover hidden relationships.\nThe formula for the chi-square statistic is:\n\\[\n\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\n\\]\nWhere: - \\(O_i\\) = Observed frequency - \\(E_i\\) = Expected frequency - \\(\\sum\\) = The summation symbol, meaning we sum across all categories.\n\n\n\nSuppose we’re investigating sightings of UFOs 👽 across regions:\n\n\n\n\n\n\n\n\nRegion\nObserved Sightings (\\(O_i\\))\nExpected Sightings (\\(E_i\\))\n\n\n\n\nArea 51\n50\n40\n\n\nRoswell\n70\n60\n\n\nPine Gap\n30\n50\n\n\n\nUsing the chi-square formula, we calculate:\n\\[\n\\chi^2 = \\frac{(50 - 40)^2}{40} + \\frac{(70 - 60)^2}{60} + \\frac{(30 - 50)^2}{50}\n\\]\nThis leads to:\n\\[\n\\chi^2 = \\frac{100}{40} + \\frac{100}{60} + \\frac{400}{50} = 2.5 + 1.67 + 8 = 12.17\n\\]\nIf this value exceeds the critical value, we may conclude there’s something strange going on in these regions… but the truth is out there! 🛸\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe chi-square test reveals mysteries hidden in plain data. Use it wisely, and remember: the truth is out there! 🛸\n\n\nVisit Quarto"
  },
  {
    "objectID": "posts/2024_12/geometric_pattern_ggplot.html",
    "href": "posts/2024_12/geometric_pattern_ggplot.html",
    "title": "Geometic Art Generator with Shiny",
    "section": "",
    "text": "🌟 Introduction\nggplot2—the trusty workhorse of R. It’s definitely have been the go-to package for creating stunning visualizations for years. And it’s not going anywhere anytime soon. 🎉\nBut I’ve always wondered: What if my ggplot2 creations could come to life? What if I could tweak a slider and instantly see my charts morph? Enter Shiny—a magical tool to make R interactive.\nI procrastinated for years. I finally jumped in. Thanks to tools like shinyapps.io and shinythemes, the process was much smoother than I imagined. These tools took away the stress of deployment and styling, making Shiny approachable even for a beginner like me.\n\n\n🎨 Geometric Generative Art - Shiny App Experimentation\n\n\nCode\ngraph LR\n    A[Static ggplot2 Plot] --&gt; B[Dynamic Shiny App]\n    B --&gt; C[Published on shinyapps.io]\n    C --&gt; D[Embedded in Blog Post]\n\n\n\n\n\ngraph LR\n    A[Static ggplot2 Plot] --&gt; B[Dynamic Shiny App]\n    B --&gt; C[Published on shinyapps.io]\n    C --&gt; D[Embedded in Blog Post]\n\n\n\n\n\n\nTo dip my toes into Shiny, I created an app that lets you experiment with geometric generative art. Adjust sliders to tweak parameters like rotation, scale, and color, and transformation on coordinate system to see how patterns come to life in real time!\n\n\n\n\n\n\nThis app is more of a personal playground for exploring patterns than a polished product. Feel free to experiment!\n\n\n\n\n\n\n\n🎥 From Interactivity to Animation\nAs I played with the app, I wanted to see how parameter changes would look as a sequence. I automated the process to generate frames and stitched them into this animated gif:\n\n\n\n\n✍️ Key Takeaways\nShiny brings interactivity to static ggplot2 visualizations—perfect for both data exploration and presentation.\nTools like shinyapps.io and shinythemes make the process approachable and stylish! I’ve also started exploring newer options like bslib and thematic, which seem promising for even more customization and polished visuals. ✨\nThis one’s probably obvious to seasoned Shiny users. But for me, it was a total lightbulb 💡 moment. Decoupling Shiny app development from the blog itself made everything so much easier, and I wish I’d known this sooner!\nStart with something fun to learn Shiny—because jumping straight into building a business dashboard feels like a much higher hurdle. Experimenting with something playful, like geometric art, makes the learning curve way less intimidating."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CHI(χ)-Files",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nTaco Hat Cake Gift Pizza with Monkey, Ninja and Unicorn\n\n\n\n\n\n\nDecember 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing 445 Calendar in R\n\n\n\n\n\n\nDecember 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeometic Art Generator with Shiny\n\n\n\n\n\n\nDecember 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFish-Eye Lens Effect with ggplot2\n\n\n\n\n\n\nDecember 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Seigaha Motif with ggplot2\n\n\n\n\n\n\nDecember 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHello World! The First Post!\n\n\nAn introduction to the Chi-Files blog and its exciting journey trying to learn Quarto.\n\n\n\nDecember 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024_12/taco_hat_cake_gift_pizza.html",
    "href": "posts/2024_12/taco_hat_cake_gift_pizza.html",
    "title": "Taco Hat Cake Gift Pizza with Monkey, Ninja and Unicorn",
    "section": "",
    "text": "🌮🎩🍰🎁🍕 Holiday Fun Gone Wild!\nOver the Christmas holiday, my niece and nephew introduced me to Taco Cat Goat Cheese Pizza, a game that’s equal parts chaotic and hilarious. Imagine trying to slap a card while screaming “TACO!” but your hand freezes like it forgot its job. 🖐️🌮\nMy niece and nephew absolutely crushed me — turns out kids are scarily good at this game. Maybe I was too stuffed with holiday treats (I think I’ve had one too many cookies🍪🍫🍷).\nBut even in defeat, I had so much fun that I decided I needed a version of this game at home. So, I went ahead and bought Taco Hat Cake Gift Pizza (because, let’s be honest, who can resist a ninja 🥷 and unicorn 🦄?).\n\n\nCreation of Card Deck as Tibble\n\n\nCode\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\nlibrary(ggtext) # Improved Text Rendering Support for 'ggplot2'\nlibrary(ggimage) # Use Image in 'ggplot2'\nlibrary(fs) # Cross-Platform File System Operations Based on 'libuv'\n\n\n\n\nCode\n# Define the palette\npal5 &lt;- c(taco=\"#0fa3b1\",hat=\"#b5e2fa\",cake=\"#fdfcdc\",pizza=\"#eddea4\",gift=\"#f7a072\")\nbase_img_path &lt;- path(here::here(),\"posts\",\"2024_12\",\"images\")\n\n# Sample card composition data\ncards_comp &lt;- tibble(\n  card = c(\"Taco\", \"Hat\", \"Cake\", \"Gift\", \"Pizza\", \"Monkey\", \"Ninja\", \"Unicorn\"),\n  emoji = c(\"🌮\", \"🎩\", \"🍰\", \"🎁\", \"🍕\", \"🐵\", \"🥷\", \"🦄\"),\n  emoji_img = c(taco=path(base_img_path,\"taco.png\"),\n                hat=path(base_img_path,\"hat.png\"),\n                cake=path(base_img_path,\"cake.png\"),\n                gift=path(base_img_path,\"gift.png\"),\n                pizza=path(base_img_path,\"pizza.png\"),\n                monkey=path(base_img_path,\"monkey.png\"),\n                ninja=path(base_img_path,\"ninja.png\"),\n                unicorn=path(base_img_path,\"unicorn.png\")),\n  type = c(rep(\"base\",times=5),rep(\"special\",times=3)),\n  count = c(11,11,11,11,11,3,3,3)\n)\ncards &lt;- cards_comp |&gt; uncount(count)\ncards$color &lt;- c(rep(pal5[\"taco\"],times=8),c(pal5[c(\"pizza\",\"gift\",\"hat\")]),\n          rep(pal5[\"hat\"],times=9),c(pal5[c(\"taco\",\"cake\")]),\n          rep(pal5[\"cake\"],times=8),c(pal5[c(\"taco\",\"gift\",\"hat\")]),\n          rep(pal5[\"gift\"],times=8),c(pal5[c(\"pizza\",\"taco\",\"pizza\")]),\n          rep(pal5[\"pizza\"],times=8),c(pal5[c(\"hat\",\"taco\",\"gift\")]),\n          c(pal5[c(\"gift\",\"pizza\",\"hat\")]),\n          c(pal5[c(\"hat\",\"pizza\",\"taco\")]),\n          c(pal5[c(\"taco\",\"cake\",\"hat\")])) \n\n\n\n\nCard Composition\n\n\nCode\ncards |&gt;\n  arrange(type) |&gt;\n  #slice_sample(n = nrow(cards)) |&gt;\n  #mutate(player=c(rep(c(\"A\",\"B\",\"C\",\"D\",\"E\"),times=12),\"X\",\"X\",\"X\",\"X\")) |&gt;\n  mutate(grp=if_else(type==\"base\",card,type)) |&gt;\n  mutate(grp=fct_inorder(grp)) |&gt;\n  group_by(grp) |&gt;\n  mutate(idx=row_number()) |&gt;\n  ggplot(aes(x=idx,y=grp)) +\n  geom_tile(aes(fill=I(color)), width=0.75, height=0.97) +\n  geom_image(aes(image=emoji_img, by=\"width\")) +\n  coord_fixed() +\n  theme_nothing(base_family=\"Roboto Condensed\") +\n  geom_richtext(aes(x=0,y=grp,\n                    label=str_glue(\"&lt;b&gt;{n}&lt;/b&gt;&lt;br&gt;{grp}&lt;br&gt;cards\")),\n                data = . %&gt;% group_by(grp) %&gt;% summarise(n=n(),det=paste(unique(card),collapse=\"&lt;br&gt;\")),\n                family=\"Roboto Condensed\",\n                fill=\"transparent\",\n                label.colour=\"transparent\") +\n  labs(title=\"Composition of Cards inside of Taco Hat Cake Gift Pizza\")"
  }
]