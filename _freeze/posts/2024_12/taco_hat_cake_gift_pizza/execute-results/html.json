{
  "hash": "f9016a2b5479c0ae7eee80189dd707c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Recreating the Chaos of Taco Hat Cake Gift Pizza in R\"\ndate: last-modified\ncategories: [r, game]\nformat:\n  html:\n    code-fold: true\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n### 🌮🎩🍰🎁🍕 Taco Hat Cake Gift Pizza with Monkey, Ninja, and Unicorn\n\nOver the Christmas holiday, my niece and nephew introduced me to [Taco Cat Goat Cheese Pizza](https://en.wikipedia.org/wiki/Taco_Cat_Goat_Cheese_Pizza), a game that’s equal parts chaotic and hilarious. Imagine trying to slap a card while screaming \"TACO!\" but your hand freezes like it forgot its job. 🖐️🌮\n\nMy niece and nephew absolutely crushed me — I like to blame that I've had one too many cookies and was too slow 🍪🍫🍷.\n\nBut even in defeat, I had so much fun that I decided I needed a version of this game at home. So, I went ahead and bought Taco Hat Cake Gift Pizza (because, let’s be honest, who can resist a ninja 🥷 and unicorn 🦄?).\n\n### Crafting the Card Deck\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Pakcages Used in This Blog Post\"}\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\nlibrary(ggtext) # Improved Text Rendering Support for 'ggplot2'\nlibrary(ggimage) # Use Image in 'ggplot2'\nlibrary(fs) # Cross-Platform File System Operations Based on 'libuv'\n```\n:::\n\n\n\nWhen I opened the game, I found myself fascinated by the simple yet clever design of the card deck. It’s a perfect balance of “base” cards (like Taco, Hat, Cake, Gift, and Pizza) and “special” cards (Monkey, Unicorn and Ninja). Naturally, my data-nerd instincts kicked in, and I thought: *Why not recreate this deck as a dataset in R?*\n\nUsing the tidyverse, I created a small dataset to represent the deck. Instead of manually duplicating rows to match the card counts, I used one of my favorite hidden gems in tidyverse: [`uncount()`](https://tidyr.tidyverse.org/reference/uncount.html) in `tidyr` package.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Creation of the Card Deck\"}\n# Define the palette\npal5 <- c(taco=\"#2f4858\",hat=\"#33658a\",cake=\"#86bbd8ff\",pizza=\"#f6ae2dff\",gift=\"#f26419\")\nbase_img_path <- path(here::here(),\"posts\",\"2024_12\",\"images\")\n\n# Sample card composition data\ncards_comp <- tibble(\n  card = c(\"Taco\", \"Hat\", \"Cake\", \"Gift\", \"Pizza\", \"Monkey\", \"Ninja\", \"Unicorn\"),\n  emoji = c(\"🌮\", \"🎩\", \"🍰\", \"🎁\", \"🍕\", \"🐵\", \"🥷\", \"🦄\"),\n  emoji_img = c(taco=path(base_img_path,\"taco.png\"),\n                hat=path(base_img_path,\"hat.png\"),\n                cake=path(base_img_path,\"cake.png\"),\n                gift=path(base_img_path,\"gift.png\"),\n                pizza=path(base_img_path,\"pizza.png\"),\n                monkey=path(base_img_path,\"monkey.png\"),\n                ninja=path(base_img_path,\"ninja.png\"),\n                unicorn=path(base_img_path,\"unicorn.png\")),\n  type = c(rep(\"base\",times=5),rep(\"special\",times=3)),\n  count = c(11,11,11,11,11,3,3,3)\n)\n\n###. Here's the power of Uncount function, opposite of dplyr::count()\ncards <- cards_comp |> uncount(count)\n\n### After cards have been unnested, assigning background color\ncards$color <- c(rep(pal5[\"taco\"],times=8),c(pal5[c(\"pizza\",\"gift\",\"hat\")]),\n          rep(pal5[\"hat\"],times=9),c(pal5[c(\"taco\",\"cake\")]),\n          rep(pal5[\"cake\"],times=8),c(pal5[c(\"taco\",\"gift\",\"hat\")]),\n          rep(pal5[\"gift\"],times=8),c(pal5[c(\"pizza\",\"taco\",\"pizza\")]),\n          rep(pal5[\"pizza\"],times=8),c(pal5[c(\"hat\",\"taco\",\"gift\")]),\n          c(pal5[c(\"gift\",\"pizza\",\"hat\")]),\n          c(pal5[c(\"hat\",\"pizza\",\"taco\")]),\n          c(pal5[c(\"taco\",\"cake\",\"hat\")])) \n```\n:::\n\n\n\n#### Spotlight on uncount()\n\nIf you’ve ever struggled to expand a dataset by repeating rows based on a count column, uncount() is a lifesaver. In just one line, it takes a column like count and automatically duplicates rows the specified number of times. I actually didn't know this function till fairly recently.  \n\n### Visualizing the Card Composition \n\nWith the deck dataset ready, I couldn’t resist visualizing it. Using `ggplot2` and [`ggimage`](https://cran.r-project.org/web/packages/ggimage/index.html), I created a colorful layout that shows the composition of cards in Taco Hat Cake Gift Pizza. \n\nHere’s the plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Layout Out Base & Special Card\"}\ncards |>\n  arrange(type) |>\n  #slice_sample(n = nrow(cards)) |>\n  #mutate(player=c(rep(c(\"A\",\"B\",\"C\",\"D\",\"E\"),times=12),\"X\",\"X\",\"X\",\"X\")) |>\n  mutate(grp=if_else(type==\"base\",card,type)) |>\n  mutate(grp=fct_inorder(grp)) |>\n  group_by(grp) |>\n  mutate(idx=row_number()) |>\n  ggplot(aes(x=idx,y=grp)) +\n  geom_tile(aes(fill=I(color)), width=0.75, height=0.97) +\n  geom_image(aes(image=emoji_img, by=\"height\"), size=0.1) +\n  coord_fixed() +\n  theme_nothing(base_family=\"Roboto Condensed\") +\n  geom_richtext(aes(x=0,y=grp,\n                    label=str_glue(\"<b>{n}</b><br>{grp}<br>cards\")),\n                data = . %>% group_by(grp) %>% summarise(n=n(),det=paste(unique(card),collapse=\"<br>\")),\n                family=\"Roboto Condensed\",\n                fill=\"transparent\",\n                label.colour=\"transparent\") +\n  labs(title=\".    Composition of Cards inside of Taco Hat Cake Gift Pizza\")\n```\n\n::: {.cell-output-display}\n![](taco_hat_cake_gift_pizza_files/figure-html/card_comp-1.png){width=672}\n:::\n:::\n\n\n\n\n### Shuffling the Deck and Dealing to Players 🎲\n\nOnce the deck was ready, it was time to shuffle and deal. After all, what’s a card game without a bit of randomness? Using [`slice_sample()`](https://dplyr.tidyverse.org/reference/slice.html), I shuffled the cards, then distributed them to five imaginary players.\n\nHere’s how the shuffled cards looked when dealt out, with any extra cards forming a “Left Over Pile”:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Shuffling and Dealing\"}\n# Shuffle the cards\nshuffled_cards <- cards |> \n  slice_sample(n = nrow(cards))\n\nplayer_num <- 5\nshuffled_cards |>\n  mutate(idx=row_number()-1,\n         player = (idx%%player_num)+1) |>\n  mutate(is_left_over=idx>=player_num*12) |>\n  mutate(player=if_else(is_left_over,\"Left Over Pile\",str_c(\"Player \",player))) |>\n  ggplot(aes(x=idx%%4,y=floor((idx%%12)/4))) +\n  geom_tile(aes(fill=I(color)),width=0.97, height=0.97) +\n  geom_image(aes(image=emoji_img, by=\"height\"), size=0.12) +\n  theme_nothing(base_family=\"Roboto Condensed\") +\n  facet_wrap(~player)\n```\n\n::: {.cell-output-display}\n![](taco_hat_cake_gift_pizza_files/figure-html/card_original_hands-1.png){width=768}\n:::\n:::\n\n\n\n### Final Thoughts\n\nRecreating Taco Hat Cake Gift Pizza in R was a fun way to blend coding with a bit of chaos. From shuffling cards to imagining new twists, this exercise now sparked few different ideas on how to utilize this mini dataset — and maybe a few new rules for game night. 🌮🎩🍰\n",
    "supporting": [
      "taco_hat_cake_gift_pizza_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}