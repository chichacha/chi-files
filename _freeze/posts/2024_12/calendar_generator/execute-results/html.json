{
  "hash": "01fef08a362f6192c3c99f34cdcbdd4c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing 445 Calendar in R\"\ndate: \"2024-12-29\"\ncategories: [r, ggplot, calendar, leaflet, suncalc]\nformat:\n  html:\n    code-fold: true\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n### Have You Heard of the 4-4-5 Calendar? 📆\n\nIf you’ve worked in retail, you might already know that time isn’t always measured in standard months. Enter the 4-4-5 calendar: a reporting tool that divides a year into 12 periods, each organized into quarters of 4, 4, and 5 weeks (i.e. 13 weeks in each quarter). This structure ensures comparability across years by standardizing the length of each reporting period. (But yes, this isn’t perfect either—every 5-6 years, this produces a year with 53 weeks.)\n\n### Why Use a 4-4-5 Calendar?\n\nStandard Gregorian calendars often lead to reporting headaches🤕, especially when months have varying lengths or different counts of weekends. The 4-4-5 calendar solves this by:\n\n-   Aligning periods to weeks, making year-over-year comparisons simpler.\n-   Standardizing reporting cycles, especially for weekly-driven industries like retail.\n-   Providing flexibility with alternative formats, such as the 4-5-4 calendar, for specific business needs.\n\nThere's also a sibling version👧🏻, the 4-5-4 calendar, which I personally prefer because it ensures that American Thanksgiving 🦃🎁 always falls within Period 11. In contrast, the 4-4-5 calendar may place Thanksgiving in Period 11 or 12, depending on the year.\n\n### Building a Custom 4-4-5 Calendar in R\n\nTo create a reusable tool, I developed the create_calendar function. This function takes a year and a calendar type (\"445\" or \"454\") and returns a detailed tibble with dates, weeks, periods, and quarters. Function takes the year, and returns calendar as data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Create Calendar Function\"}\ncreate_calendar <- function(year, calendar_type = \"445\", col_pal = NULL, ...) {\n  if (is.null(col_pal)) {\n    col_pal <- ggthemes::tableau_color_pal(\"Hue Circle\")(19)[c(1:13)]\n  }\n  \n  cal <- tibble(\n    dt = seq.Date(ymd(paste0(year-1, \"-12-01\")), ymd(paste0(year, \"-12-31\")), by = \"day\")\n  )\n  \n  wpq <- switch(calendar_type,\n                \"445\" = tibble(\n                  wk = 1:53,\n                  p = sort(c(rep(1:12, each = 4), c(3, 6, 9, 12, 12))),\n                  q = sort(c(rep(1:4, each = 13), c(4)))\n                ),\n                \"454\" = tibble(\n                  wk = 1:53,\n                  p = sort(c(rep(1:12, each=4), c(2, 5, 8, 11, 12))),\n                  q = sort(c(rep(1:4, each = 13), c(4)))\n                ),\n                stop(\"Invalid calendar type. Choose '445' or '454'.\")\n  )\n  \n  cal <- cal |>\n    mutate(\n      yr = isoyear(dt),\n      wk = isoweek(dt),\n      wday = wday(dt, label = TRUE,week_start = getOption(\"lubridate.week.start\", 1))\n    ) |>\n    left_join(wpq, by = \"wk\") |>\n    mutate(color_num=wk + p + q) |>\n    mutate(color_wk = colourvalues::color_values(color_num, \n                                                 palette=farver::decode_colour(col_pal))) |>\n    filter(yr==year)\n  \n  return(cal)\n}\n```\n:::\n\n\n\n### Making the Visual Calendar\n\nUsing `ggplot2`, we can create a visual representation of the calendar. The plot organizes weeks within periods and highlights each period in a grid layout.\n\n\n\n::: {.cell}\n\n:::\n\n\n\nI've turned this ggplot2 as another function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Plot Calendar Function\"}\nplot_calendar <- function(cal) {\n  cal |>\n    ggplot(aes(x=wday,y=color_num)) +\n    geom_tile(aes(fill=I(color_wk)), color=\"#ffffffde\") +\n    geom_text(aes(label=day(dt),\n                  color=I(if_else(month(dt)==p,\"#ffffff\",\"#e3e3e3\"))),  \n              family=\"Roboto Condensed\") +\n    geom_text(aes(label=str_c(\"W\",wk),color=I(color_wk),x=0),\n              family=\"Roboto Condensed\", \n              data = . %>% count(wk,color_num,color_wk,p,q))+\n    geom_blank(aes(x=-1)) +\n    scale_y_reverse(breaks=NULL) +\n    scale_x_discrete(labels=~str_sub(.,1L,2L)) +\n    facet_wrap(~p,ncol=3, scales=\"free\") +\n    cowplot::theme_minimal_grid(font_family=\"Roboto Condensed\",line_size=0) +\n    labs(x=\"\",y=\"\")\n}\n```\n:::\n\n\n\n::: panel-tabset\n#### 2025 - 445 🗓️\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_calendar(year=2025, calendar_type=\"445\") |>\n  plot_calendar()\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n\n#### 2025 - 454 🗓️\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_calendar(year=2025, calendar_type=\"454\") |>\n  plot_calendar()\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n\n#### 2024 - 445 🗓️\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_calendar(year=2024, calendar_type=\"445\") |>\n  plot_calendar()\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\n\n#### 2024 - 445 🗓️\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_calendar(year=2024, calendar_type=\"454\") |>\n  plot_calendar()\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n\n:::\n\nWhile the 4-4-5 calendar does simplifies retail reporting, timekeeping isn’t always that straightforward. I've taken things up a notch and explore how sunlight, time zones, and Daylight Saving Time adds extra complexity.\n\n### Up the Complication of Timekeeping by a Few Notches\n\nAt first glance, keeping track of time seems simple 💡—but dig deeper, and it’s anything but. Add time zones, daylight saving time (DST), and patterns of sunlight to the mix, and you’ve just cranked the complexity up to expert mode. 😅\n\nI don't think I’ve solved this puzzle perfectly yet, but here’s my attempt using R’s [suncalc](https://cran.r-project.org/web/packages/suncalc/index.html \"Get sun position, sunlight phases (times for sunrise, sunset, dusk, etc.), moon position and lunar phase for the given location and time.\") package to visualize sunlight data alongside our trusty 4-4-5 calendar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Sunlight Length Plot Creation\"}\n## install.package if you don't have it installed.  \nlibrary(suncalc)\n\n# Predefined city list with lat/lon & timezones.  \n# To see full listing of available timezones, OlsonNames()\n\n### Creation of cities tibble\ncities <- tibble(\n  city = c(\n    \"Vancouver\", \"Toronto\", \"New York\", \"Chicago\", \"Los Angeles\", \n    \"Tokyo\", \"Paris\", \"London\", \"Munich\",\n    \"Sydney\", \"Mumbai\", \"Cape Town\", \"Moscow\", \"São Paulo\",\n    \"Denpasar\", \"Lima\", \"Dubai\", \"Bangkok\", \"Istanbul\",\n    \"Reykjavik\", \"Tromsø\", \"Buenos Aires\", \"Cairo\", \"Anchorage\"\n  ),\n  country = c(\n    \"Canada\", \"Canada\", \"United States\", \"United States\", \"United States\",\n    \"Japan\", \"France\", \"United Kingdom\", \"Germany\",\n    \"Australia\", \"India\", \"South Africa\", \"Russia\", \"Brazil\",\n    \"Indonesia\", \"Peru\", \"United Arab Emirates\", \"Thailand\", \"Turkey\",\n    \"Iceland\", \"Norway\", \"Argentina\", \"Egypt\", \"United States\"\n  ),\n  lat = c(\n    49.246292, 43.65107, 40.712776, 41.878113, 34.052235, \n    35.689487, 48.856613, 51.507222, 48.135124,\n    -33.868820, 19.076090, -33.924870, 55.755825, -23.550520,\n    -8.650000, -12.046374, 25.276987, 13.756331, 41.008240,\n    64.1466, 69.6496, -34.603722, 30.044420, 61.218056\n  ),\n  lon = c(\n    -123.116226, -79.347015, -74.005974, -87.629799, -118.243683, \n    139.691711, 2.352222, -0.1275, 11.581981,\n    151.209290, 72.877426, 18.424055, 37.617298, -46.633308,\n    115.216667, -77.042793, 55.296249, 100.501762, 28.978359,\n    -21.9426, 18.9560, -58.3816, 31.2357, -149.900278\n  ),\n  tz = c(\n    \"America/Vancouver\", \"America/Toronto\", \"America/New_York\", \"America/Chicago\", \n    \"America/Los_Angeles\", \"Asia/Tokyo\", \"Europe/Paris\", \"Europe/London\", \n    \"Europe/Berlin\", \"Australia/Sydney\", \"Asia/Kolkata\", \"Africa/Johannesburg\", \n    \"Europe/Moscow\", \"America/Sao_Paulo\", \"Asia/Makassar\", \"America/Lima\", \n    \"Asia/Dubai\", \"Asia/Bangkok\", \"Europe/Istanbul\",\n    \"Atlantic/Reykjavik\", \"Europe/Oslo\", \"America/Argentina/Buenos_Aires\", \n    \"Africa/Cairo\", \"America/Anchorage\"\n  )\n)\n\n\n\n# Generalized function \nvisualize_sunlight <- function(city_name, year) {\n  # Find city details\n  #city_name <- (\"Vancouver, BC\")\n  #year <- 2025\n  city <- cities %>% filter(city == city_name)\n  if (nrow(city) == 0) stop(\"City not found in predefined list.\")\n  \n  # Get sunlight data for the year\n  \n  sunlight_data <- create_calendar(year = year) %>%\n    pull(dt) %>%\n    map_dfr(~ getSunlightTimes(date = ., lat = city$lat, lon = city$lon, tz = city$tz)) %>%\n    as_tibble()  %>%\n    mutate(\n      daylight_dur = as.duration(sunrise %--% sunset),\n      across(where(is.POSIXct), \n             list(time = ~ lubridate::hms(format(ymd_hms(.), \"%H:%M:%S\"))))\n    )\n  \n  # Add calendar columns\n  sunlight_data <- sunlight_data %>% bind_cols(create_calendar(year = year))\n  \n  # Summarise by Period\n  p_summary <- sunlight_data |>\n  group_by(p) |>\n  summarise(\n    across(c(dt:color_num), list(min = ~min(.), max = ~max(.))),\n    avg_dur = mean(daylight_dur)\n  ) |>\n  mutate(\n    avg_dur_seconds = as.numeric(avg_dur),  # Convert duration to seconds\n    avg_dur_hours = avg_dur_seconds / 3600,  # Convert seconds to hours\n    descr = str_glue(\n      \"P{p}\\n{format(dt_min, '%Y %b %e')} - {format(dt_max, '%Y %b %e')}\\n\",\n      \"Avg Daylight: {round(avg_dur_hours, 2)} hours\"\n    )\n  ) |>\n  relocate(p, descr)\n  \n  # Detect DST start and end\n  dst_info <- tibble(\n    date = sunlight_data$date,\n    is_dst = with_tz(ymd_hms(paste(date, \"00:00:00\")), tzone = city$tz) %>% dst()\n  ) %>% filter(is_dst) %>%\n    filter(max(date)==date|min(date)==date)\n  \n  # Dynamically create subtitle\n  if (nrow(dst_info) == 0) {\n    subtitle <- \"This location does not observe Daylight Saving Time (DST).\"\n  } else {\n    dst_start <- if_else(city$lat>0,min(dst_info$date),max(dst_info$date))\n    dst_end <- if_else(city$lat>0,max(dst_info$date),min(dst_info$date))\n    subtitle <- str_glue(\"DST Starts: {format(dst_start, '%b %e %a (Week %V)')} | DST Ends: {format(dst_end, '%b %e %a (Week %V)')}\")\n  }\n  \n  # Generate the plot\n  ggplot(sunlight_data, aes(x = as.numeric(color_num) + as.numeric(wday) / 7)) +\n    geom_ribbon(aes(ymin = dawn_time, ymax = dusk_time, fill = I(colorspace::lighten(color_wk, 0.7)))) +\n    geom_ribbon(aes(ymin = sunrise_time, ymax = sunset_time, fill = I(color_wk))) +\n    geom_line(aes(y = solarNoon_time), linetype = 3) +\n    scale_x_continuous(breaks = NULL) +\n    cowplot::theme_minimal_vgrid(font_family = \"Roboto Condensed\") +\n    geom_hline(yintercept = max(as.numeric(sunlight_data$sunrise_time)), color = \"black\", linetype = 3) +\n    geom_hline(yintercept = min(as.numeric(sunlight_data$sunrise_time)), color = \"black\", linetype = 3) +\n    geom_hline(yintercept = max(as.numeric(sunlight_data$sunset_time)), color = \"black\", linetype = 3) +\n    geom_hline(yintercept = min(as.numeric(sunlight_data$sunset_time)), color = \"black\", linetype = 3) +\n    scale_y_continuous(\n      labels = ~ hms::as_hms(.),\n      breaks = seq(0, 24 * 3600, by = 3600), # Hourly breaks\n      limits = c(0, 24 * 3600)\n    ) +\n    labs(\n      x = \"\",\n      y = \"\",\n      title = str_glue(\"Sunlight Duration for {city_name} {city$country} ({year}) - 445 Calendar\"),\n      subtitle = subtitle\n    ) +\n    geom_label(aes(x=color_num_min, \n                  y=avg_dur_seconds, label=str_c(\"P\",p,\"\\navg\\n\", round(avg_dur_hours,1),\"\\nhrs\")),\n              data = p_summary, family=\"Roboto Condensed\", \n              lineheight=0.8, hjust=0, fill=\"#ffffff50\")\n}\n```\n:::\n\n\n\n::: panel-tabset\n#### Vancouver 🇨🇦\nVancouver 🇨🇦🌲⛰️\nDaylight Saving Time: DST is observed from March to November. Summer days are long (about 16 hours) while winter days are short (about 8 hours). 👩🏻‍🏫 There are more than twice as many daylight hours on the summer solstice than on the winter one.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Vancouver\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n\n#### New York 🇺🇸\nNew York 🇺🇸🗽🏙\nDaylight Saving Time: DST is observed from March to November, just like Vancouver.  About 15 hours in the summer and about 9.4 hours in the winter, New York’s patterns are slightly less pronounced than Vancouver’s but still notable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"New York\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n\n#### Munich 🇩🇪\nMunich 🇩🇪🍺🏰\nDaylight Saving Time: Commences in late March and concludes in late October. Sunlight: Summer days last approximately 16 hours, while winter days last approximately 8.5 hours.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Munich\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-12-1.png){width=768}\n:::\n:::\n\n\n\n#### Tromsø 🇳🇴\nTromsø 🇳🇴❄️🌌\n**Tromsø’s graph below is broken due to the sun setting after midnight during the summer (a phenomenon called the midnight sun), and I didn't think through on these edge cases while creating ggplot2!  \n\nDaylight Saving: Starts last Sunday in March, ends last Sunday in October in Norway.  That said, Tromsø (and other places in the Arctic Circle) experience midnight sun and polar night -  So DST has no actual practical effect??!  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Tromsø\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\n\n#### Sydney 🇦🇺\nSydney 🇦🇺🌊🐨\nDaylight Saving: Starts first Sunday in October, ends first Sunday in April as seen on the glitch on visual below.  I didn't quite get the extraction of DST accurately in my function, so subtitle still isn't accurate... 😅 🙀Another interesting thing I learned is that Not all states observe DST in Australia 🇦🇺!  This creates a patchwork of timezones during the summer in Australia!  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Sydney\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n\n#### Tokyo 🇯🇵\nTokyo 🇯🇵🏙️🌸\nDaylight Saving: Japan doesn’t observe DST (Since 1952). Most of Japan experiences consistent sunrise and sunset times throughout the year, making DST less beneficial. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Tokyo\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-15-1.png){width=768}\n:::\n:::\n\n\n\n#### Denpasar 🇮🇩\nDenpasar 🇮🇩🌴🌊\nLike the rest of Indonesia, Bali does not observe DST. The daylight time remains constant throughout the year due to its tropical, equatorial location thoughout the year.  So there's really no need for DST.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Denpasar\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\n\n#### Cairo 🇪🇬\nCairo 🇪🇬🕌🐪\nDaylight Saving: Unlike Canada or US, DST transition occurs on Friday in Late April and Thursdays in Late October, instead of more typical Sunday.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_sunlight(\"Cairo\", 2025)\n```\n\n::: {.cell-output-display}\n![](calendar_generator_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\n\n:::\n\n### Where are these cities?\n\nHere's a map of the cities I've picked in above.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Interactive Leaflet Map Code\"}\nlibrary(leaflet)\n\ncities |> \n  filter(city %in% c(\"Tokyo\",\"Denpasar\",\"Vancouver\",\"New York\",\"Munich\",\"Sydney\",\"Cairo\",\"Tromsø\")) |>\n  leaflet() |>\n  addProviderTiles(\"CartoDB.DarkMatter\") |>\n  addMarkers(\n    label = ~city,\n    popup = ~map(paste0(\n    \"<b>\", city, \", \",country, \"</b><br>\",\n    \"Lat: \", round(lat, 2), \"<br>\",\n    \"Lon: \", round(lon, 2)\n  ), htmltools::HTML\n  ),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"bold\", \"color\" = \"white\"),\n      direction = \"auto\",\n      textsize = \"12px\",\n      noHide = TRUE,\n      textOnly = TRUE,\n      sticky = TRUE\n    )\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-9e020dab2e0460a12d49\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9e020dab2e0460a12d49\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.DarkMatter\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addMarkers\",\"args\":[[49.246292,40.712776,35.689487,48.135124,-33.86882,-8.65,69.64960000000001,30.04442],[-123.116226,-74.00597399999999,139.691711,11.581981,151.20929,115.216667,18.956,31.2357],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},[\"<b>Vancouver, Canada<\\/b><br>Lat: 49.25<br>Lon: -123.12\",\"<b>New York, United States<\\/b><br>Lat: 40.71<br>Lon: -74.01\",\"<b>Tokyo, Japan<\\/b><br>Lat: 35.69<br>Lon: 139.69\",\"<b>Munich, Germany<\\/b><br>Lat: 48.14<br>Lon: 11.58\",\"<b>Sydney, Australia<\\/b><br>Lat: -33.87<br>Lon: 151.21\",\"<b>Denpasar, Indonesia<\\/b><br>Lat: -8.65<br>Lon: 115.22\",\"<b>Tromsø, Norway<\\/b><br>Lat: 69.65<br>Lon: 18.96\",\"<b>Cairo, Egypt<\\/b><br>Lat: 30.04<br>Lon: 31.24\"],null,null,null,[\"Vancouver\",\"New York\",\"Tokyo\",\"Munich\",\"Sydney\",\"Denpasar\",\"Tromsø\",\"Cairo\"],{\"interactive\":false,\"permanent\":true,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"12px\",\"textOnly\":true,\"style\":{\"font-weight\":\"bold\",\"color\":\"white\"},\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-33.86882,69.64960000000001],\"lng\":[-123.116226,151.20929]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### Timekeeping: A Rabbit Hole Worth Falling Into 🐰🕳️\n\nWhat started as a simple exploration of the 4-4-5 calendar turned into a wild ride through the quirks of time—daylight saving oddities, cultural twists, and even the midnight sun.  \n\nI love these \"useless trivias,\" but they’re a reminder that time isn’t just ticking numbers on a clock—it’s shaped by geography, culture, and sometimes even political drama. This was a fun wake-up call (pun intended) that time is more complex, and entertaining? than we think!! \n",
    "supporting": [
      "calendar_generator_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-2.0.0/leaflet-providers_2.0.0.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-plugin-2.2.2/leaflet-providers-plugin.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}