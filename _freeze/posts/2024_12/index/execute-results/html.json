{
  "hash": "f40e9a62bb828f34ea1ec2ad7301ddd0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fish-Eye Lens Effect with ggplot2\"\ndate: \"2024-12-22\"\ncategories: [r, ggplot]\nformat:\n  html:\n    code-fold: true\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n### Fascination with \"Warping\" ...\n\nThe \"fish-eye\" lens has always fascinated me. It was my gateway into photography‚Äîits quirky, distorted charm never failed to add whimsy to my shots. Some of my favourite memories are capturing our furry friendsüê∂üêΩüêÑ. \n\nRecently, I started wondering why not bring that same fish-eyeüêüüëÅÔ∏è magic into my data visualizations. While it may not suit business dashboards, it's perfect for artistic visualizations.  With ggplot2‚Äôs [`coord_trans()`](https://ggplot2.tidyverse.org/reference/coord_trans.html) and its [`\"pseudo_log\"`](https://scales.r-lib.org/reference/log_trans.html) transformation as inspiration, I decied to push the boundaries and create my first custom transformation.\n\n### Digression : The Seigaha Motif as a Canvas üé®\n\nTo test this idea, I used a Seigaha motif I created the other day.  It's a geometric design with overlapping circles that naturally lends itself to experimentation.  I introduced randomness to the colors using irrational numbers as denominators, leveraging R's modulo operation for real numbers.  Just another attempt at creating \"pseudo-randomness\" in the design. \n\n\n$$\nx \\mod y = x - \\text{floor}\\left(\\frac{x}{y}\\right) \\times y\n$$\n\n#### Famous \"Irrational\" Numbers in Math\n\n##### Golden Ratio\n\nThe [Golden Ratio](https://en.wikipedia.org/wiki/Golden_ratio) is often represented by the Greek letter $\\phi$ and is defined as: $$\n\\phi = \\frac{1 + \\sqrt{5}}{2}\n$$\n\n##### Silver Ratio\n\nThe lesser-known [Silver Ratio](https://mathworld.wolfram.com/SilverRatio.html), represented by $\\delta_s$, is defined as: $$\n\\delta_s = 1 + \\sqrt{2}\n$$\n\n##### Euler's Number\n\nEuler's number, represented by $e$, is a fundamental constant in mathematics: $$\ne = \\exp(1)\n$$ It is approximately $e \\approx 2.718$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(ggforce) # Accelerating 'ggplot2'   \nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'  \nlibrary(gt) # Easily Create Presentation-Ready Display Tables \n\n### just declaring the colour palette here\ncol10 <- str_split(\"001219-005f73-0a9396-94d2bd-e9d8a6-ee9b00-ca6702-bb3e03-ae2012-9b2226\",\"-\")\ncol10_pal <-str_c(\"#\",col10 |> unlist())\n\n### Creating data frame that is basis of layout\ndf <- expand_grid(x = seq(-12, 12, by = 2), \n                  y = seq(-8, 8, by = 1)) |>\n  arrange(y,x) |>\n  mutate(y_odd=(y%%2==1)) |>\n  mutate(idx=row_number()-1) |>\n  mutate(x=if_else(y_odd,x+1,x))\n\n### For each grid location, I want 6 concentric circles\nr_values <- seq(0.1,1,length.out=6)\n\n### Just defining some \"Irregular Numbers\" that I can use with Modulo \ngr <- (1 + sqrt(5)) / 2 ## the golden ratio \nsr <- (1 + sqrt(2)) ##. lesser known silver ratio\neuler_num <- exp(1)\n\ndf_long <- df |> expand_grid(r=r_values) |>\n  mutate(r_var=r*(idx%%sr)+1) ## I'm experimenting here with modulo with pi \n```\n:::\n\n\n\n\n### Cartesian Coordinates:  The Baseline\n\nHere's the unaltered design using `coord_fixed`, maintaining regular Cartesian coordinates.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long |>\n  arrange(-y,idx, desc(r)) |>\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  #coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n### Entering the World of Distortion\n\n#### Pseudo-Log Transformation \n\nWarping begins with using `pseudo_log` transformation with  [`coord_trans`](https://ggplot2-book.org/coord#transformations-with-coord_trans) creates an intriguing distortion:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long |>\n  arrange(-y,idx, desc(r)) |>\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Custom Fisheye Transformation\n\nInspired by radial distortion formula, I've attempt to write a custom fisheye transformation.  \n\n\nk controls the intensity of the distortion.\n\n-   Positive k = Barrel Distortion (like Fisheye)\n-   Negative k = Pincusion Distortion (Inverse Fisheye).\n-   r' is pronouced as \"r prime\" \n$$\n    r‚Ä≤=r‚ãÖ(1+k*r^2)\n$$\nHere's the implementation: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\n\n# Define a fisheye transformation using trans_new\nfisheye_trans <- function(k = 0.01) {\n  trans_new(\n    name = \"fisheye\",\n    transform = function(r) r * (1 + k * r^2),        # Forward transformation\n    inverse = function(r_prime) r_prime / (1 + k * r_prime^2)  # Inverse transformation\n  )\n}\n\n# Create the fisheye transformation object\nfisheye <- fisheye_trans(k = 0.03)\n\ndf_long |>\n  arrange(-y,idx, desc(r)) |>\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  #coord_trans(x=\"pseudo_log\",y=\"pseudo_log\",clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  coord_trans(x=fisheye, y=fisheye) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nThe result didn't quite meet my expectations.. üòÖü•π, but it's a start...! \n\n### Experimenting with Modulus Transformation in `scales` package üì¶\n\nI also explored transformations like modulus, which yielded effects closer to the fish-eye look I envisioned:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the modulus transformation with a specific parameter (e.g., p = 0.5)\nmod_trans_y <- modulus_trans(p = 0.01)\n\n\ndf_long |>\n  arrange(-y,idx, desc(r)) |>\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=mod_trans_y ,y=mod_trans_y ,clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_trans_x <- modulus_trans(p = 1.5)\ndf_long |>\n  arrange(-y,idx, desc(r)) |>\n  ggplot() +\n  geom_circle(aes(x0=x,y0=y,r=r,fill=r_var),\n              linewidth=0.1,color=\"#fffff3de\", linetype=1) +\n  #coord_fixed(clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme_nothing() +\n  scale_fill_gradientn(colors=col10_pal) +\n  scale_color_gradientn(colors=col10_pal) +\n  coord_trans(x=mod_trans_x ,y=mod_trans_y ,clip=\"on\", xlim=c(-11,11),ylim=c(-7,7)) +\n  theme(plot.margin=unit(c(0,0,0,0),\"mm\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n### Final Thoughts\n\nExperimenting with warping in ggplot2 opens up a playful avenue for some quirky visualizations.  I'm now thinking what to distort next! \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}