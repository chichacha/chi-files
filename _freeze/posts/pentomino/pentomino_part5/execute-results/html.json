{
  "hash": "905c0d21f21bdd141557f1b83cb32887",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Utiling geom_arc_bar for creation of geometric art\"\ndate: last-modified\ncategories: [r, puzzle, ggplot, patchwork, ggforce]\nformat:\n  html:\n    code-fold: true\n    fig-width: 9.5\n    fig-height: 6.5\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\nimage: images/Pentominos_tran.gif\n---\n\n\n\n### Geometry x Colors Experimentation\n\nI'm still obsessing with Pentomino dataset that I have been using.  \n\nI love using the [`ggforce`](https://ggforce.data-imaginist.com/index.html) package for creating stunning visualizations. `ggforce` essentially allows you to extend the ggplot2 capabilities, i.e. ggplot2 on steroid.  My go-to functions usually include [geom_regon](https://ggforce.data-imaginist.com/reference/geom_regon.html), [geom_parallel_sets](https://ggforce.data-imaginist.com/reference/geom_parallel_sets.html), and [geom_circle](https://ggforce.data-imaginist.com/reference/geom_circle.html). But recently, I realized there’s functions I haven’t fully explored, one of them being  [geom_arc_bar](https://ggforce.data-imaginist.com/reference/geom_arc_bar.html).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Setups and Pakcages Used in This Blog Post\"}\n# Load required libraries\nlibrary(tidyverse)    # Data wrangling and general utilities\nlibrary(ggforce)      # Extra geoms for ggplot2 \nlibrary(cowplot)      # Additional plotting helpers\nlibrary(patchwork)    # Combine multiple ggplots effortlessly!\n\n# Pentomino Solutions Dataset \npento_sol <- read_csv(\"https://raw.githubusercontent.com/chichacha/pentomino/refs/heads/main/pentomino_solution.csv\")\n\n### Convert Solution to XY position data frame\npento_sol_df <- pento_sol |>\n  mutate(solution_num = row_number()) |>\n  mutate(sol_text = str_split(sol_text, \" \")) |>\n  unnest(sol_text) |>\n  group_by(solution_num) |>\n  mutate(y = row_number()) |>\n  ungroup() |>\n  mutate(sol_text = str_split(sol_text, \"\")) |>\n  unnest(sol_text) |>\n  group_by(solution_num, y) |>\n  mutate(x = row_number()) |>\n  ungroup()\n\npento_min <- pento_sol_df |>\n  filter(sol_text != \".\") |>  # exclude the \".\" cells\n  select(x, y, sol_text, solution_num, dim) |>\n  nest(.by = c(solution_num, dim))\n\n# Just using my retro color palette\nretro <-  c(\"#00A0B0\", \"#6A4A3C\", \"#CC333F\", \"#EB6841\", \"#EDC951\")\nretro12 <- colorRampPalette(retro)(12)\npiece<-c(\"F\",\"I\",\"L\",\"N\",\"P\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\")\nnames(retro12) <- piece\n```\n:::\n\n\n\n\n### Quick Demo of Basic Use geom_arc_bar function\n\nHere’s a demo showing the effects of different geom_arc_bar parameters like segment smoothness (n), expansion or contraction (expand), and rounding of corner (radius).\nI like that I can draw pie or donut chart without leaving cartesian coordinate.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Simple Example\"}\n# Sample data\ndata <- data.frame(\n  x = c(0,0,0,0,0,0),\n  y = c(0,0,0,0,0,0),\n  r0=c(rep(0.5,times=4),0,0),\n  r=c(rep(1,times=4),0.5,0.5),\n  start = c(0, pi/2, pi, 3*pi/2,0,pi),\n  end = c(pi/2, pi, 3*pi/2, 2*pi,pi,2*pi),\n  group=c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\")\n)\n\n# Plot using geom_arc_bar\nggplot(data) +\n  geom_arc_bar(aes(\n    x0 = x, y0 = y, r0 = r0, r = r, \n    start = start, end = end, \n    fill = group\n  ), color=\"#fffff3\") +\n  geom_arc_bar(aes(\n    x0 = x+2, y0 = y, r0 = r0, r = r, \n    start = start, end = end, \n    fill = group\n  ), color=\"#fffff3\", n=4) + ## n to control the number of points used to draw a full circle.\n  geom_arc_bar(aes(\n    x0 = x+4, y0 = y, r0 = r0, r = r, \n    start = start, end = end, \n    fill = group\n  ), color=\"#fffff3\", expand=unit(-1,\"mm\")) + ## expand to control expansion, negative value is used to contract\n  geom_arc_bar(aes(\n    x0 = x+6, y0 = y, r0 = r0, r = r, \n    start = start, end = end, \n    fill = group\n  ), color=\"#fffff3\", radius=unit(3,\"mm\"), n=36) +\n  theme_minimal_grid(font_family=\"Roboto Condensed\") +\n  labs(title = \"Fun with geom_arc_bar\", fill = \"Group\") +\n  coord_fixed() +\n  scale_fill_manual(values=c(retro,\"#323433\")) +\n  scale_x_continuous(breaks=c(0,2,4,6)) +\n  scale_y_continuous(breaks=c(-1,0,1))\n```\n\n::: {.cell-output-display}\n![](pentomino_part5_files/figure-html/geom_arc_bar_demo-1.png){width=921.6}\n:::\n:::\n\n\n\n### Slightly Abstract Pentomino Solutions \n\nWhat happens when a classic Pentomino puzzle collides with geometric abstraction? These visuals are still valid solutions to the Pentomino problem, but now they blur the line between puzzles and art. By experimenting with shapes, colors, these solutions have transformed into something entirely new: playful geometric art with a hint of order and chaos 🪄🐰🎩\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabstract_plot <- function(i){\n  pento_min$data[[i]] |>\n    arrange(sol_text) |>\n    group_by(sol_text) |>\n    mutate(idx=row_number(),\n           diff_x=x-lag(x,default=1),\n           diff_y=y-lag(y,default=1)) |>\n    ungroup() |>\n    ggplot() +\n    geom_tile(aes(x=x,y=y), fill=\"#fffff3\") +\n    geom_arc_bar(aes(x0=x+0.5,y0=y+0.5,r0=0, r=sqrt(1), start=3*pi/2, end=pi, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx==1)) +\n    geom_arc_bar(aes(x0=x-0.5,y0=y-0.5,r0=0, r=sqrt(1), start=0, end=pi/2, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx==2)) +\n    geom_arc_bar(aes(x0=x+0.5,y0=y-0.5,r0=0, r=sqrt(1), start=0, end=-pi/2, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx==3)) +\n    geom_circle(aes(x0=x,y0=y, r=sqrt(0.25),\n                    fill=sol_text), \n                data = . %>% filter(idx==5),\n                color=\"transparent\") +\n    geom_arc_bar(aes(x0=x+0.5,y0=y+0.5,r0=0, r=sqrt(1), start=3*pi/2, end=pi, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx==4)) +\n    coord_fixed() +\n    scale_fill_manual(values=retro12) +\n    #scale_color_manual(values=retro12) +\n    theme_nothing()\n  \n}\n\npento_min |> filter(dim==\"8×8a\") |> \n  pull(solution_num) |>\n  sample(size=6) |>\n  map(abstract_plot) |>\n  wrap_plots() \n```\n\n::: {.cell-output-display}\n![](pentomino_part5_files/figure-html/art_variation1-1.png){width=912}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TSP)\n\nabstract_plot2 <- function(i) {\n  my_tsp <-pento_min$data[[i]] |>\n    mutate(sol_text=as.numeric(fct_reorder(sol_text,x*y,sum))*100) |>\n    dist(\"manhattan\") |>\n    TSP::as.TSP()\n  \n  ### available TSP Method without installing extra\n  methods <- c(\"identity\", \"random\", \"nearest_insertion\",\n               \"cheapest_insertion\", \"farthest_insertion\", \"arbitrary_insertion\",\n               \"nn\", \"repetitive_nn\", \"two_opt\")\n  \n  my_tsp_path <- solve_TSP(my_tsp, method=methods[3]) ## nearest insertion \n  \n  pento_min$data[[i]][as.integer(my_tsp_path),] |>\n    mutate(idx=row_number()) |>\n    ggplot() +\n    geom_arc_bar(aes(x0=x+0.5,y0=y+0.5,r0=0, r=sqrt(1), start=3*pi/2, end=pi, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx%%8==1)) +\n    geom_arc_bar(aes(x0=x-0.5,y0=y-0.5,r0=0, r=sqrt(1), start=0, end=pi/2, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx%%8==2)) +\n    geom_arc_bar(aes(x0=x+0.5,y0=y-0.5,r0=0, r=sqrt(1), start=0, end=-pi/2, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx%%8==3)) +\n    geom_circle(aes(x0=x,y0=y, r=sqrt(0.25),\n                    fill=sol_text), \n                data = . %>% filter(idx%%8==4),\n                color=\"transparent\") +\n    geom_arc_bar(aes(x0=x+0.5,y0=y+0.5,r0=0, r=sqrt(1), start=3*pi/2, end=pi, \n                     fill=sol_text), color=\"transparent\",\n                 data = . %>% filter(idx%%8==5)) +\n    geom_regon(aes(x0=x,y0=y,r=sqrt(0.5),sides=4, fill=sol_text,angle=0), \n               color=\"transparent\",\n               data = . %>% filter(idx%%8==6)) +\n    geom_regon(aes(x0=x,y0=y,r=sqrt(0.5),sides=4, fill=sol_text,angle=0), \n               color=\"transparent\",\n               data = . %>% filter(idx%%8==7)) +\n    geom_regon(aes(x0=x,y0=y,r=sqrt(0.5),sides=4, fill=sol_text,angle=0), \n               color=\"transparent\",\n               data = . %>% filter(idx%%8==0)) +\n    # geom_text(aes(x=x,y=y, label=idx), color=\"#fffff330\",\n    #           family=\"Futura\") +\n    coord_fixed() +\n    scale_fill_manual(values=retro12) +\n    theme_nothing()\n  \n}\n\npento_min |> filter(dim==\"8×8d\") |> \n  pull(solution_num) |>\n  sample(size=6) |>\n  map(abstract_plot2) |>\n  wrap_plots() \n```\n\n::: {.cell-output-display}\n![](pentomino_part5_files/figure-html/art_variation2-1.png){width=912}\n:::\n:::\n",
    "supporting": [
      "pentomino_part5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}