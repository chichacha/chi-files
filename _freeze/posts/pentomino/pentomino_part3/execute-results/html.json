{
  "hash": "bd6732e62139169c681f058286d19559",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Compact Pentomino Solution : Parquet Magic\"\ndate: last-modified\ncategories: [r, puzzle, ggplot, sf, arrow]\nformat:\n  html:\n    code-fold: true\n    fig-width: 9.5\n    fig-height: 6.5\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\nimage: images/Pentominos.gif\n---\n\n\n\n### Saving the `sf` Object (Pentomino Solutions) for Later Use as Parquet 📦\n\nConfession time: I only discovered Parquet files last year. 🙈 For someone who spends a good chunk of their time in the data world, it felt like a secret club I wasn’t part of. But hey, if you’re not in that club yet either, let’s join together now! 🎉\n\nLast few days, I was working with an `sf` object containing solutions for my Pentomino puzzles. (Original Solution is from this amazing Pentomino Website by [Isomer Design](https://isomerdesign.com/Pentomino/)).  Now, Pentomino solution isn’t “big data” by any stretch (I usually deal with much larger datasets in my business work). But even so, the file was big enough that I couldn’t just upload it to GitHub.😅\n\nThis got me thinking: what if I save the `sf` object as Parquet format to reduce the file size, and so I can reuse the file later on. \n\n### Why Parquet\n\nThink of [Parquet](https://parquet.apache.org/) as the ultra-organized sibling to CSV. While CSV is great for simplicity, Parquet packs your data more tightly and efficiently—like Marie Kondo personally folding each column! ✨\n\nIn terms of size, my Pentomino solutions went from a hefty 105MB GeoJSON to a feather-light 695KB Parquet file. Perfect for GitHub! 🔥 (P.S. You’ll see this dataset in action shortly!)\n\nIt’s not just about saving space—though. It’s also about speed 🏎️. Parquet makes it faster to read, write, and process data, which become crusial when working with millions of rows of data.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Converting & Writing sf file to Parquet\"}\n# Load required libraries\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse' \nlibrary(sf) # Simple Features for R        \nlibrary(arrow) # Integration to 'Apache' 'Arrow'    \n\n# Save Pentomino solutions in different formats\npento_sf |> write_rds(file = \"data/pentomino_solution_sf.rds\")  # RDS format\n# To reload later: pento_sf <- read_rds(\"data/pentomino_solution_sf.rds\")\n\npento_sf |> write_sf(\"data/pentomino_solution_sf.geojson\")  # GeoJSON format\n\n# Attempting to save as Parquet using write_sf (this doesn't work)\npento_sf |> write_sf(\"data/pentomino_solution_sf.parquet\")\n# Error: write_sf can't write Parquet files directly! \n\n# Alternative: Using write_parquet (this also fails for spatial objects)\npento_sf |> write_parquet(\"data/pentomino_solution_sf.parquet\")\n# Error: Can't infer Arrow data type from object inheriting from XY / POLYGON / sfg.\n\n# Convert sf object to data frame because write_parquet with geometry fails.\npento_df <- pento_sf %>% \n  mutate(wkt = st_as_text(geometry)) |> # Convert geometry to WKT format\n  st_drop_geometry() ## now I've converted geometry column, I don't need them\n\npento_df |> write_parquet(\"data/pentomino_solution_sf.parquet\")\n##https://arrow.apache.org/docs/r/reference/write_parquet.html\n\n# File size comparison (approximate):\n# data/pentomino_solution_sf.geojson   105.51 MB\n# data/pentomino_solution_sf.rds       110.62 MB\n# data/pentomino_solution_sf.parquet   695 KB (so small!!)\n```\n:::\n\n\n\nFor larger or more complex datasets, you might not see this dramatic size reduction, but Parquet still offers significant savings and speed! Because this pentomino `sf` dataset is actually quite simple.  File size reduction is quite impressive! \n\nI've uploaded this parquet file to [Github repo](https://github.com/chichacha/pentomino).  So I'll read in the solution file from Github in below. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Reading in Pentomino Solution Parquet File from GitHub\"}\n# Load required libraries\nlibrary(tidyverse) # Data manipulation and visualization\nlibrary(arrow)     # Integration with Apache Arrow for Parquet files\nlibrary(sf)        # Simple Features for handling spatial data\nlibrary(cowplot)   # Streamlined ggplot2 themes and annotations\n\n# Just Prepping some color palette\nretro <-  c(\"#00A0B0\", \"#6A4A3C\", \"#CC333F\", \"#EB6841\", \"#EDC951\")\nretro12 <- colorRampPalette(retro)(12)\npiece<-c(\"F\",\"I\",\"L\",\"N\",\"P\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\")\nnames(retro12) <- piece\n\n# Read Parquet file from GitHub\npento_df <- read_parquet(\"https://github.com/chichacha/pentomino/raw/refs/heads/main/pentomino_solution_sf.parquet\")\n\n# Convert WKT column back to geometry to recreate the spatial object\npento_sf <- pento_df |> \n  st_as_sf(wkt = \"wkt\") |>        # Convert WKT strings into spatial geometries\n  rename(geometry = wkt)          # Rename for compatibility with sf conventions\n\n# Show the structure of pento_sf\nglimpse(pento_sf) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 321,416\nColumns: 5\n$ sol_idx   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ dim       <chr> \"3×10\", \"3×10\", \"3×10\", \"3×10\", \"3×10\", \"3×10\", \"3×15\", \"3×1…\n$ value     <chr> \"F\", \"I\", \"N\", \"P\", \"U\", \"Y\", \"F\", \"I\", \"L\", \"N\", \"P\", \"T\", …\n$ piece_cnt <int> 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12,…\n$ geometry  <POLYGON> POLYGON ((6.5 0.5, 5.5 0.5,..., POLYGON ((0.5 1.5, 1.5 1…\n```\n\n\n:::\n:::\n\n\n\n### Solution Counts per Puzzle Dimension\n\nHave you ever wondered how different puzzle dimensions influence the number of possible solutions? In below plot, the length of the bar reflects the abundance of solutions per pieces being used. \n\nThis visualization is based on solutions provided by [isomerdesign.com](https://isomerdesign.com/Pentomino/), a fantastic resource for pentomino enthusiasts. After parsing their solution files, I discovered a total of **33,008** solutions spanning 46 unique puzzle dimensions. 46 Dimensions - *3×10\\, 3×15\\, 3×20\\, 3×21a\\, 3×21b\\, 3×21c\\, 3×21d\\, 4×10\\, 4×15\\, 4×16a\\, 4×16b\\, 4×16c\\, 4×16d\\, 4×16e\\, 4×16g\\, 4×16h\\, 4×16i\\, 4×16k\\, 5×10\\, 5×11\\, 5×12\\, 5×3\\, 5×4\\, 5×5\\, 5×6\\, 5×7\\, 5×8\\, 5×9\\, 6×10\\, 8×8a\\, 8×8b\\, 8×8c\\, 8×8d\\, 8×8e\\, Triplicate F\\, Triplicate I\\, Triplicate L\\, Triplicate N\\, Triplicate P\\, Triplicate T\\, Triplicate U\\, Triplicate V\\, Triplicate W\\, Triplicate X\\, Triplicate Y\\, Triplicate Z* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Creation of Stacking Bar Chart with ggplot2\"}\npento_sf |>\n  st_drop_geometry() |>   #By dropping geometry, computation is quicker\n  group_by(dim,piece_cnt) |>\n  summarise(solution_cnt=max(sol_idx),.groups = \"drop\") |> \n  #filter(piece_cnt==3)\n  #count(dim,wt=solution_cnt,sort=T) |> arrange(n)\n  ggplot(aes(x=fct_reorder(as.factor(piece_cnt),solution_cnt,sum,.desc=F),\n             y=solution_cnt)) +\n  geom_col(aes(fill=dim, group=dim)) +\n  ggfittext::geom_fit_text(aes(label=str_c(dim,\"\\n\",scales::comma(solution_cnt)), group=dim),position=\"stack\", family=\"Roboto Condensed\") +\n  coord_flip() +\n  scale_fill_manual(values=colorRampPalette(retro)(length(unique(pento_sf$dim))), guide=\"none\") +\n  labs(\n  title = \"Number of Solutions Provided per Pieces Used\",\n  subtitle = \"Based on solution files from isomerdesign.com\",\n  caption = \"Data Source: https://isomerdesign.com/Pentomino/\",\n  y = \"Number of Solutions\", x=\"Number of Pentomino Pieces Used in Puzzle\") +\n  theme_minimal_vgrid(font_family=\"Roboto Condensed\") +\n  annotate(geom=\"text\",x=\"9\",y=0,label=\"*Triplicate Series*\\n\", hjust=0, vjust=0,\n           family=\"Roboto Condensed\", size=3,fontface = \"italic\") +\n  annotate(geom=\"label\",x=\"5\", y=120, label=\"<<< 5x5 squares can be made 107 different ways!\", hjust=0, family=\"Roboto Condensed\", size=3, fill=\"lightyellow\") +\n  annotate(geom=\"label\",x=\"4\", y=100, label=\"<<< 5x4 rectangles can be made 50 different ways\", hjust=0, family=\"Roboto Condensed\", size=3, fill=\"lightyellow\") +\n  annotate(geom=\"label\",x=\"3\", y=50, label=\"<<< 5x3 rectangles can be made 7 different ways\", hjust=0, family=\"Roboto Condensed\", size=3, fill=\"lightyellow\") +\n  geom_blank(aes(x=\"\"))\n```\n\n::: {.cell-output-display}\n![](pentomino_part3_files/figure-html/unnamed-chunk-3-1.png){width=921.6}\n:::\n:::\n\n\n\n### 5x5 Squares: The Ultimate Pentomino Challenge\n\nHow many ways could you fit a 5x5 square using only five pentomino pieces? Believe it or not, there are 107 unique solutions! 🧩\n\nSome pieces, like the trusty L, are frequent problem-solvers—they appear in many solutions. Meanwhile, the poor X is the wallflower of this puzzle, only making it into two solutions. It seems that some shapes just get along better with tight grids than others.\n\nBelow, you’ll find a visualization of all 107 solutions. Each group represents a different combination of pieces, showing which sets of pentominoes team up to conquer the 5x5 challenge. It’s a fascinating glimpse into which pieces are the MVPs and which are sitting out this game.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"107 5x5 Solutions\"}\npiece_comb <-pento_sf |>\n  filter(piece_cnt==5) |> \n  st_drop_geometry() |>\n  group_by(sol_idx) |>\n  summarise(piece_combo=paste(sort(value),collapse=\"\"),.groups=\"drop\") |>\n  add_count(piece_combo,sort=T)\n\npento_sf |>\n  filter(piece_cnt==5) |> \n  left_join(piece_comb) |>\n  mutate(piece_combo=fct_reorder(piece_combo,n,max,.desc=T)) |>\n  ggplot() +\n  geom_sf(aes(fill=value), color=\"#fffff3\") +\n  scale_fill_manual(values=retro12) +\n  facet_wrap(~piece_combo+sol_idx,ncol=15) +\n  theme_nothing()\n```\n\n::: {.cell-output-display}\n![](pentomino_part3_files/figure-html/pentomino_5x5-1.png){width=921.6}\n:::\n:::\n\n\n\nTo dig a little deeper, I also explored how often each piece shows up across the 107 solutions. Below, you can see a breakdown of where each pentomino appears and how many times it’s been part of a winning combination. The number on each piece reflects its frequency—L is clearly the hero of this puzzle appearing in 85 solutions out of 107 (79%), while X is struggling to make an impression.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Frequency of Piece Usage & Coverage\"}\npento_sf |>\n  filter(piece_cnt==5) |> \n  group_by(value) |>\n  summarise(freq=n()) |>\n  ggplot() +\n  geom_sf(aes(fill=value), color=\"#fffff3\") +\n  geom_text(aes(label=str_c(value,\" \",freq), x=0.5,y=6.5), \n               family=\"Roboto Condensed\", size=7,\n               fontface=\"bold\", hjust=0, vjust=1) +\n  scale_fill_manual(values=retro12) +\n  facet_wrap(~fct_reorder(value,freq,sum,.desc=T),ncol=6) +\n  theme_nothing()\n```\n\n::: {.cell-output-display}\n![](pentomino_part3_files/figure-html/pentomino_5x5_agg-1.png){width=921.6}\n:::\n:::\n\n\n\n### The Triplicate Series: Pentominoes in 3x Size!\n\nThere are solutions labeled as Triplicate Series — it’s like a puzzle within a puzzle,Pentomino-ception! 🤯\n\nNormally, each pentomino consists of **5** squares, but in this series, we take it to the next level. Each pentomino is rebuilt to be 3x bigger using a combination of 9 other pentominoes (excluding itself, of course). The result? A supersized version made up of **45** squares!\n\nFor example, the classic \"L\" pentomino is recreated as a massive \"L,\" but only with help from the rest of the gang (except for the original \"L\" itself)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Triplicated Pentomino\"}\n### Handy helper function to flip the geometry\nflip <- function(direction = \"h\") {\n  if (direction == \"h\") {\n    matrix(c(-1, 0, 0, 1), 2, 2)  # Flip horizontally\n  } else if (direction == \"v\") {\n    matrix(c(1, 0, 0, -1), 2, 2)  # Flip vertically\n  } else {\n    stop(\"Invalid direction. Use 'h' or 'v'.\")\n  }\n}\n\n### Offset so that letters don't overlap\noffset <- function(i,n=6){\n  x <- (i-1)%%n\n  y <- floor((i-1)/n)\n  c(x,y)\n}\n\npento_sf |>\n  filter(str_detect(dim,\"Tri\")) |>\n  filter(sol_idx==1) |>\n  mutate(dim_idx=dense_rank(dim)) |>\n  mutate(offset=map(dim_idx,offset)) |>\n  rowwise() |>\n  mutate(geometry=geometry+offset*13) |>\n  ggplot() +\n  geom_sf(aes(fill=value, geometry=geometry*flip(\"v\")),color=\"#fffff3\") +\n  scale_fill_manual(values=retro12) +\n  theme_nothing()\n```\n\n::: {.cell-output-display}\n![](pentomino_part3_files/figure-html/triplicate-1.png){width=921.6}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Triplicated Pentomino Example 2\"}\npento_sf |>\n  filter(str_detect(dim,\"Tri\")) |>\n  filter(sol_idx==15) |>\n  mutate(dim_idx=dense_rank(dim)) |>\n  mutate(offset=map(dim_idx,offset)) |>\n  rowwise() |>\n  mutate(geometry=geometry+offset*12.5) |>\n  mutate(geometry=st_buffer(geometry,dist=-0.1)) |>\n  ungroup() |>\n  ggplot() +\n  geom_sf(aes(fill=value, geometry=geometry*flip(\"v\"))) +\n  geom_sf(aes(fill=value, \n              geometry=st_voronoi(geometry*flip(\"v\"),bOnlyEdges = T)),\n          color=\"#fffff350\",linewidth=0.1) +\n  \n  scale_fill_manual(values=retro12) +\n  theme_nothing()\n```\n\n::: {.cell-output-display}\n![](pentomino_part3_files/figure-html/triplicate2-1.png){width=921.6}\n:::\n:::\n\n\n\n\n### Warp for Now...\n\nAnd with that, the Triplicate Series and 5x5 solutions are just the tip of the Pentomino iceberg.  Thank you for going into the rabbit hole with me! 🐇🕳️\n\n![](images/Pentominos.gif)\n",
    "supporting": [
      "pentomino_part3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}