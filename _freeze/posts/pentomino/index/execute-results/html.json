{
  "hash": "8b2435aa69991952fa3f2e587a37ff0f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"What's a Pentomino Anyway?\"\ndate: \"2025-01-04\"\ncategories: [r, puzzle, ggplot, sf]\nformat:\n  html:\n    code-fold: true\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Pakcages Used in This Blog Post\"}\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'\nlibrary(sf) # Simple Features for R\nlibrary(patchwork) # The Composer of Plots\n```\n:::\n\n\n\n\n### Pentominos?\n\nWhen I was a kid, my dad made a wooden pentomino puzzle which I don't remember actually solving it (oops!). Many years later, he recreated it with a 3D printer, and while it‚Äôs now a plastic version, my puzzle-solving skills haven‚Äôt improved much. Whenever I try to put it away, I find myself searching the internet for solutions. So, I thought‚Äîwhy not save some solutions on my blog? BUT, instead of just posting them, I decided to bring pentominos in R to play around.\n\n### What are Pentominos anyway?\n\nPentominoes are geometric puzzles made up of 12 unique shapes, each consisting of exactly five connected squares. The name comes from the Greek root \"penta\", meaning five.  The well known Domino üÅì is 2 connected squares! \n\nEach piece is named after the letter it resembles‚Äîlike F, L, T, and Z. The challenge? Fit these pieces together to cover a rectangular board (or other shapes) without overlaps or gaps.\n\nHere‚Äôs a look at the 12 pentomino pieces:\n![12 pentomino pieces](images/pentomino_cover.png)\n\n\n### Creation of Pentomino Tibble \n\nBelow is the script to create `pentomino_df`. Essentially I just recorded coordinates where I should draw a square, so that I can easily draw pentomino pieces with `geom_tile` function with ggplot2 later! \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Creation of Individual Pieces as Tibble\"}\nretro_col5 <- c(\"#00A0B0\", \"#6A4A3C\", \"#CC333F\", \"#EB6841\", \"#EDC951\")\n\npentomino_pieces <- list(\n  F = list(c(0,0), c(0,1), c(1,1), c(1,2), c(2,1)),\n  I = list(c(0,0), c(1,0), c(2,0), c(3,0), c(4,0)),\n  L = list(c(0,0), c(1,0), c(2,0), c(3,0), c(3,1)),\n  N = list(c(0,0), c(1,0), c(2,0), c(2,1), c(3,1)),\n  P = list(c(0,0), c(0,1), c(1,0), c(1,1), c(0,2)),\n  T = list(c(0,0), c(0,1), c(0,2), c(1,1), c(2,1)),\n  U = list(c(0,0), c(1,0), c(2,0), c(0,1), c(2,1)),\n  V = list(c(0,0), c(1,0), c(2,0), c(2,1), c(2,2)),\n  W = list(c(0,2), c(1,1), c(1,2), c(2,1), c(2,0)),\n  X = list(c(0,1), c(1,1), c(1,0), c(1,2), c(2,1)),\n  Y = list(c(0,0), c(1,0), c(2,0), c(3,0), c(2,1)),\n  Z = list(c(0,2), c(1,2), c(1,1), c(1,0), c(2,0))\n)\n\n# Convert pentomino pieces into a tibble\npentomino_df <- tibble(\n  piece = names(pentomino_pieces),\n  coords = pentomino_pieces\n) %>%\n  unnest(coords) %>%  # Expand list of coordinates into rows\n  mutate(\n    x = map_dbl(coords, ~ .x[1]),  # Extract x coordinate\n    y = map_dbl(coords, ~ .x[2])   # Extract y coordinate\n  ) %>%\n  select(-coords)  # Remove the original list column\n\n# Assign symmetry type to pieces \npentomino_df <- pentomino_df |>\n  mutate(rotate_options = \n           case_when(piece %in% c(\"X\") ~ 1,\n                     piece %in% c(\"I\") ~ 2,\n                     piece %in% c(\"Z\") ~ 2,\n                     piece %in% c(\"T\",\"U\",\"V\",\"W\") ~ 2,\n                     piece %in% c(\"F\",\"L\",\"N\",\"P\",\"Y\") ~ 4),\n         flip_options = case_when(piece %in% c(\"F\",\"L\",\"N\",\"P\",\"Y\",\"Z\") ~ 2,\n                                  TRUE ~ 1)) |>\n  mutate(group_name = \n           case_when(piece %in% c(\"X\") ~ \"multi-axis\",\n                     piece %in% c(\"I\") ~ \"line-point\",\n                     piece %in% c(\"Z\") ~ \"point\",\n                     piece %in% c(\"T\",\"U\",\"V\",\"W\") ~ \"line\",\n                     piece %in% c(\"F\",\"L\",\"N\",\"P\",\"Y\") ~ \"none\"))\n```\n:::\n\n\n\nWhat's the use of dataset, if you don't visualize them? ;)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Visualzing Each Pieces with ggplot2\"}\n### using geom_tile to visualize\npentomino_df |>\n  group_by(piece) |>\n  ### I just want to give different color to each square \n  mutate(idx=row_number(x)) |>\n  ggplot(aes(x=x,y=y)) +\n  geom_tile(aes(fill=factor(idx)), color=\"white\") +\n  geom_text(aes(label=str_c(piece,\"\\nsym:\",group_name)),\n            data = . %>% \n              group_by(group_name,piece) %>%\n              summarise(x=max(x)+0.5, y=max(y+1.5)), \n            hjust=1,vjust=1,\n            lineheight=0.8, family=\"Roboto Condensed\") +\n  facet_wrap(~piece+group_name) +\n  scale_fill_manual(values=retro_col5) +\n  theme_nothing() +\n  coord_fixed()  +\n  theme(plot.background=element_rect(fill=\"#fffff3\", color=\"#fffff300\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=768}\n:::\n:::\n\n\n\n### From Blocks to Geometry: Converting Pentominoes into Spatial Data\n\nWhen working with spatial data, converting objects into [simple features](https://en.wikipedia.org/wiki/Simple_Features) opens up possibilities for spatial analysis and visualization. The [`sf`](https://r-spatial.github.io/sf/) package in R provides a user-friendly and standardized way to handle geometric shapes and spatial attributes. \n\nSimple features represent spatial data as geometries (like points, lines, and polygons) alongside their associated attributes.  So here's how I've converted data frame with 60 rows into 12 rows with geometry column.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Creating sf object\"}\n# Function to create a square polygon from a coordinate\n# Each coordinate represents the bottom-left corner of a square\ncreate_square <- function(x, y) {\n  st_polygon(list(matrix(c(\n    x, y,  # Bottom Left\n    x + 1, y, #Bottom Right\n    x + 1, y + 1, #Top Right\n    x, y + 1, #Top Left\n    x, y  # Close the polygon by coming back to bottom left\n  ), ncol = 2, byrow = TRUE)))\n}\n\n# Step-by-step process to convert pentomino data into an sf object\npentomino_sf <- pentomino_df |>\n  rowwise() |>\n  # For each row, create a square geometry from the x, y coordinate\n  mutate(geometry=list(create_square(x,y))) |>\n  ungroup() |> # Remove rowwise grouping\n  group_by(piece) |>\n  # Group all square geometries for each pentomino piece into a single shape\n  summarise(geometry=st_union(st_sfc(geometry)),.groups=\"drop\") |>\n  # Convert the summarised data into an sf object\n  st_sf() \n\n# Write it out as geojson for future use\n#pentomino_sf |> \n  #st_write(fs::path(here::here(),\"posts\",\"pentomino\",\"pentomino_sf.geojson\"))\n\npentomino_sf \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 0 ymin: 0 xmax: 5 ymax: 3\nCRS:           NA\n# A tibble: 12 √ó 2\n   piece                                                            geometry\n   <chr>                                                           <POLYGON>\n 1 F     ((0 0, 0 1, 0 2, 1 2, 1 3, 2 3, 2 2, 3 2, 3 1, 2 1, 1 1, 1 0, 0 0))\n 2 I     ((0 1, 1 1, 2 1, 3 1, 4 1, 5 1, 5 0, 4 0, 3 0, 2 0, 1 0, 0 0, 0 1))\n 3 L     ((0 1, 1 1, 2 1, 3 1, 3 2, 4 2, 4 1, 4 0, 3 0, 2 0, 1 0, 0 0, 0 1))\n 4 N     ((0 1, 1 1, 2 1, 2 2, 3 2, 4 2, 4 1, 3 1, 3 0, 2 0, 1 0, 0 0, 0 1))\n 5 P               ((0 1, 0 2, 0 3, 1 3, 1 2, 2 2, 2 1, 2 0, 1 0, 0 0, 0 1))\n 6 T     ((0 0, 0 1, 0 2, 0 3, 1 3, 1 2, 2 2, 3 2, 3 1, 2 1, 1 1, 1 0, 0 0))\n 7 U     ((0 1, 0 2, 1 2, 1 1, 2 1, 2 2, 3 2, 3 1, 3 0, 2 0, 1 0, 0 0, 0 1))\n 8 V     ((0 1, 1 1, 2 1, 2 2, 2 3, 3 3, 3 2, 3 1, 3 0, 2 0, 1 0, 0 0, 0 1))\n 9 W     ((3 0, 2 0, 2 1, 1 1, 1 2, 0 2, 0 3, 1 3, 2 3, 2 2, 3 2, 3 1, 3 0))\n10 X     ((2 0, 1 0, 1 1, 0 1, 0 2, 1 2, 1 3, 2 3, 2 2, 3 2, 3 1, 2 1, 2 0))\n11 Y     ((0 1, 1 1, 2 1, 2 2, 3 2, 3 1, 4 1, 4 0, 3 0, 2 0, 1 0, 0 0, 0 1))\n12 Z     ((1 1, 1 2, 0 2, 0 3, 1 3, 2 3, 2 2, 2 1, 3 1, 3 0, 2 0, 1 0, 1 1))\n```\n\n\n:::\n:::\n\n\n\n#### Plotting SF Object with geom_sf \n\nNow that I‚Äôve transformed my pentomino shapes into sf objects, it‚Äôs time to explore the magical world of geometric unary operations! Unary operation is an operation that acts on a single geometric shape to derive a new geometry.   \n\nIn below, I'm playing around with visualizing my pentomino pieces in layers.  Each layer has its own unique touch, an inflated buffer, a deflated outline, as well as the original piece.  \n\nColour of pieces are separated by sysmetry groups.  FLNPY pieces are asymetric pieces, while TUVW has line symmetry and so on.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Plotting SF object with geom_sf\"}\n# Quickly Plotting Out with geom_sf\npentomino_sf |>\n  left_join(pentomino_df |> select(piece,group_name)) |>\n  ggplot() +\n  ### puffing it with bigger positive number\n  geom_sf(aes(fill=group_name,\n              geometry=st_buffer(geometry,dist=1)),\n          alpha=0.05, color=\"snow\") +\n  ### puffing the geometry by 0.25 to give them little bubble\n  geom_sf(aes(fill=group_name,\n              geometry=st_buffer(geometry,dist=0.25)),\n          alpha=0.3) +\n  ### original shape of pentomino pieces\n  geom_sf(aes(fill=group_name),color=\"white\") +\n  ### deflating just a bit and making it look like stiches\n  geom_sf(aes(fill=group_name,\n              geometry=st_buffer(geometry,dist=-0.2)),\n          color=\"white\",linetype=3) +\n  ### deflating closer to the core\n  geom_sf(aes(fill=group_name,\n              geometry=st_buffer(geometry,dist=-0.45)),\n          color=\"white\",linetype=1) +\n  facet_wrap(~piece) +\n  scale_fill_manual(values=retro_col5) +\n  theme_minimal_grid(font_family=\"Roboto Condensed\") +\n  labs()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n\n#### Using Minimum Rotated Rectangle \n\nNext up, I just decide to wrap each pentomino in its neatest, smallest rectangle.  This is if I were to wrap each pieces in gift wrap. üéÅ The number displayed is the area of rectangle.  \n\nThese rectangles reveal how tightly we can enclose shapes, which is useful in applications like spatial optimization or determining object orientation in real-life scenario. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Using st_minimum_rotate_rectangle\"}\n# Rotate x degrees around (0,0)\nrot <- function(a) {\n  a = a*(pi/180)\n  matrix(c(cos(a), sin(a), -sin(a), cos(a)), 2, 2)\n}\n\n# Visualize pentomino pieces with their minimum rotated rectangles\nbox_me_up <- function(angle,...) {\n  pentomino_sf |>\n  mutate(geometry=geometry*rot(angle)) |> \n  mutate(mrr_area = st_area(st_minimum_rotated_rectangle(geometry))) |>\n  left_join(pentomino_df |> select(piece,group_name)) |>\n  ggplot() +\n  # Plot rotated rectangles around each shape\n  geom_sf(aes(fill=factor(mrr_area),\n              geometry=st_minimum_rotated_rectangle(geometry)),\n          alpha=0.1,linetype=3, color=\"black\") +\n  # Plot original pentomino shapes \n  geom_sf(aes(fill=factor(mrr_area)),color=\"white\",alpha=0.9) +\n  geom_sf_text(aes(label=mrr_area), family=\"Roboto Condensed\") +\n  facet_wrap(~piece) +\n  scale_fill_manual(values=c(retro_col5,\"#56B870\"),guide=\"none\") +\n  theme_minimal_grid(font_family=\"Roboto Condensed\") +\n  labs(title=str_glue(\"{angle} degree rotated\")) +\n  theme(text=element_text(family=\"Roboto Condensed\"),\n        axis.text=element_blank()) +\n    labs(x=\"\",y=\"\")\n}\n\n\np1 <- box_me_up(90)\np2 <- box_me_up(180)\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n\nAt first, it seemed strange that the F-shape‚Äôs rotated rectangle has an area of 9.6, while a simple grid-aligned box could enclose it in an area of 9. The `st_minimum_rotated_rectangle` function looks for the tightest-fitting rectangle that can enclose the shape. It doesn‚Äôt stick to the grid - instead, it tilts the rectangle to snugly fit the shape, even if the result feels counterintuitive? (At least I thought it was counterintuitive...)  \n\n\n### Where's the Solutions?\n\nFor now, I‚Äôm wrapping up my geometry experiments (pun intended üéÅ).\n\nI‚Äôll dive into how to fit these pieces together to solve the classic pentomino puzzles - No more googling for a solution in next post. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}