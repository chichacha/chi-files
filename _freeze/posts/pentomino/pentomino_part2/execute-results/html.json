{
  "hash": "553fbdd32f073c49a5b6a548f64f9538",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pentomino Solutions 6x10 Rectangle\"\ndate: last-modified\ncategories: [r, puzzle, ggplot2]\nformat:\n  html:\n    code-fold: true\n    fig-width: 9.5\n    fig-height: 6.5\nexecute:\n  echo: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n### Solving the Puzzle: The 6x10 Pentomino Challenge (with a Big Help)\n\n![](images/Pentominos.png)\n\nThe 6x10 pentomino challenge asks you to fit all 12 pieces into a rectangle perfectly—no overlaps, no gaps, just pure geometric magic. There are 2339 unique solutions! My go-to solution site has been [isomerdesign.com](https://isomerdesign.com/Pentomino/). In this post, I'm not solving the 6x10 challenge myself, but I'll visualize some solutions using R & trusty `ggplot2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Pakcages Used in This Blog Post\"}\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'\nlibrary(sf) # Simple Features for R\nlibrary(patchwork) # The Composer of Plots\n\n### Just playing around with color palette\nretro_col_a <- c(\"#00A0B0\", \"#6A4A3C\", \"#CC333F\", \"#EB6841\", \"#EDC951\")\nretro_col_b  <-c(\"#CA0B0B\", \"#EAA109\", \"#71A6AE\", \"#18668C\", \"#06394D\")\nretro_col_c <- c(\"#325A64\", \"#44838F\", \"#68D0BD\", \"#F53F19\", \"#891C29\")\nretro_col_d <- c(\"#241965\", \"#653993\", \"#9F4094\", \"#B73D6E\", \"#F19406\")\nretro_col_e <- c(\"#383431\", \"#79C39E\", \"#EAD1B5\", \"#EE9B69\", \"#E77843\")\nretro_col_f <- c(\"#8E2605\", \"#E54B1F\", \"#FDC018\", \"#628A81\", \"#5F3924\")\nretro_col_g <- c(\"#811638\", \"#0B7978\", \"#FCB632\", \"#F27238\", \"#C32327\")\n\nretro_col <- c(retro_col_b, retro_col_e, retro_col_a, retro_col_d, retro_col_c, retro_col_f, retro_col_g)\n```\n:::\n\n\n\nI started by loading few useful pakages above.  `tidyverse` makes data wrangling simple, while `sf` helps manage spartial geometries.  Additionally I've prepped retro-inspired color palettes so that I can give the visuals a nostalgic puzzle game vibes.  \n\n### Loading the Solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Reading Text Solution File\"}\n### Thank you to solution as text! \nsol_df <- read_csv(\"https://isomerdesign.com/Pentomino/6x10/solutions.txt\",\n                   col_names=F)\n### 2339 Solutions included in CSV\n\n### Turn solution into data frame\nmake_coord_df <- function(x){\n  #x <- sol_df$X2[[1]]\n  x <- str_split(str_remove_all(x,\" \"),\"\",simplify=T)\n  matrix(x,nrow=6,ncol=10, byrow=T) |>\n    as_tibble() |>\n    mutate(y=row_number()) |>\n    pivot_longer(-y) |>\n    mutate(x=as.integer(str_extract(name,\"\\\\d+\"))) |>\n    select(x,y,piece=value) |>\n    group_by(piece) |>\n    mutate(x_min=min(x),y_min=min(y),\n           x_max=max(x),y_max=max(y),\n           idx=row_number(x+y),\n           adj_x=x-x_min+1,adj_y=y-y_min+1) |>\n    ungroup()\n}\n\n### df for data frame\nsol_df <- sol_df |> \n  mutate(solution_df = map(X2,make_coord_df))\n\n### df_long for data frame that's unnested\nsol_df_long <- sol_df |> \n  unnest(solution_df)\n```\n:::\n\n\n\nThe solutions are provided in a plain text file, where each solution is represented by 10 strings of characters x 6 rows for each of 2339 solutions for 6x10 rectangle.  Each letter corresponds to one of the 12 pentomino pieces.  Using this as input, I created a function to process each solution into a structured tibble (data frame).  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Convert to SF Object\"}\n# Function to turn coordinate as center and conver to square\ncreate_square_fence <- function(x, y) {\n  st_polygon(list(matrix(c(\n    x-0.5, y-0.5,  # Bottom Left\n    x+0.5, y-0.5, #Bottom Right\n    x+0.5, y+0.5, #Top Right\n    x-0.5, y+0.5, #Top Left\n    x-0.5, y-0.5  # Close the polygon by coming back to bottom left\n  ), ncol = 2, byrow = TRUE)))\n}\n\n### Convert data frame into sf object\nsol_sf <- sol_df_long |>\n  rowwise() |>\n  # For each row, create a square geometry from the x, y coordinate\n  mutate(geometry=list(create_square_fence(x,y)),\n         geometry_adj=list(create_square_fence(adj_x,adj_y))) |>\n  ungroup() |> # Remove rowwise grouping\n  group_by(X1,piece) |>\n  summarise(geometry=st_union(st_sfc(geometry)),.groups=\"drop\",\n            geometry_adj=st_union(st_sfc(geometry_adj),.groups=\"drop\")) |>\n  st_sf() \n\n\npieces_63 <-sol_sf |>\n  st_drop_geometry() |>\n  count(piece,geometry_adj,sort=T) |>\n  arrange(piece) |>\n  mutate(i=row_number()) |>\n  mutate(col=colourvalues::color_values(i,farver::decode_colour(retro_col)))\n\nsol_sf_comb <- sol_sf |> \n  inner_join(pieces_63 |> select(col,geometry_adj,piece))\n```\n:::\n\n\n\nOnce the data frame was ready, next step was to convert it into sf geometries for spatial analysis and visualization.  Here's how I've tackled it. \n\n1. Square Polygons: I wrote a small helper function to create a square polygon for each (x,y) coordinate.  Each square represents a single unit of the pentomino square pieces. \n2. Merging into Shapes:  To represent entire pentomino pieces, I've combined all individual square polygons for a piece into a single shape using st_union().  \n3. Normalized Geometry for Variations:  \n- Pentomino pieces can appear in up to 8 variations (rotations and flips).  For example, a single piece might have multiple \"faces\", depending on how it's oriented in the solution.\n- To identify which variations of a piece was used in each solution, I created adjusted geometries by aligning the shapes relative to their bounding boxes.  \n\n\n### Heatmap of Pentomino Placement Patterns\n\nWith the 2339 Solutions processed and converted into geometries, I decided to analyze where each pentomino piece tends to appear on the board. The result is the heatmap you see below.\n\nThe code using geom_tile() to represent the frequency of each piece at each (x,y) position across all solutions.  A facet is created for each pentomino piece, so we can see the pattern differences. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Heatmap of Pentomino Placement Patterns\"}\nsol_df_long |>\n  count(x,y,piece) |>\n  ggplot(aes(x=x,y=y)) +\n  geom_tile(aes(fill=n)) +\n  coord_fixed() +\n  facet_wrap(~piece) +\n  scale_fill_viridis_c(option=\"F\",trans=\"sqrt\",\"apperence\") +\n  theme_map(font_family=\"Roboto Condensed\")\n```\n\n::: {.cell-output-display}\n![](pentomino_part2_files/figure-html/unnamed-chunk-4-1.png){width=921.6}\n:::\n:::\n\n\n\n#### Insights from the Heatmap\n\n-   X Stays Central: The X-piece avoids edges entirely, sticking to the middle where it fits best.\n-   I Loves the Left Edges: The I-piece often hugs the edges, but there are a few spaces it avoids altogether. \n-   F and W Are Versatile: These flexible shapes show up all over, but slight tendency towards the center\n-   V and Y Favor the Edges: Their hook-like shapes are perfect for corners and boundaries.\n-   T Favors the Top Left: The T-piece seems to favour the top left-corner according to the heatmap.\n-   Z Leans Asymmetrically: Z leans to one side, and more likely to stay away from the edges.\n-   L Sticks to Edges: These elongated shapes often sit along the board's boundaries, especially the bottom left.\n-   P and U Fits Everywhere: the P-piece slots into difference places.\n\n### Recapping the Shapes\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Piece Shapes Recap\"}\np_sep <-pieces_63 |>\n  group_by(piece) |>\n  mutate(j=row_number(i)) |>\n  st_sf() |>\n  ggplot() +\n  geom_sf(aes(fill=I(col)),color=\"#fffff3\") +\n  facet_grid(j~piece) +\n  theme_nothing()\n  #theme_minimal()\n\np_stack <-pieces_63 |>\n  group_by(piece) |>\n  mutate(j=row_number(i)) |>\n  st_sf() |>\n  ggplot() +\n  geom_sf(aes(fill=I(col)),color=\"#fffff3\") +\n  geom_sf_text(aes(label=piece, \n                   geometry=geometry_adj+c(0,3)),\n               family=\"American Typewriter\", size=5,\n               data = . %>% filter(j==1)) +\n  facet_grid(~piece) +\n  theme_nothing() \n\np_sep + p_stack + plot_layout(ncol=1, heights=c(4,1))\n```\n\n::: {.cell-output-display}\n![](pentomino_part2_files/figure-html/unnamed-chunk-5-1.png){width=912}\n:::\n:::\n\n\n\nIn above I created a visualization to recap the 12 pentomino shapes, each column shows different variations of piece faces. There are 12 free pieces, but 63 fixed pieces. \n\n### Some Solutions ! \n\nSince it's bit hard to display all the solution at once...  I've first chosen these 12 special solutions.  These 12 solutions are particularly interesting because they belong to 3 unique sets where the pieces remain in their default orientation—no flipping or rotation is required! Within each set, there are 4 solutions that differ only in the arrangement of the pieces on the board.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Special 12 Solutions (3 Sets x 4 Solutions)\"}\nsol_by_color <-sol_sf_comb |>\n  st_drop_geometry() |>\n  group_by(X1) |>\n  summarise(col_pal=paste(sort(col),collapse=\",\")) |>\n  ungroup() |>\n  add_count(col_pal) |>\n  arrange(desc(n),col_pal) \n\nsol_sf_comb |> \n  inner_join(sol_by_color) |>\n  filter(n==4) |>\n  ggplot() +\n  geom_sf(aes(fill=I(col))) +\n  facet_wrap(~X1) +\n  theme_map(font_family=\"Roboto Condensed\")\n```\n\n::: {.cell-output-display}\n![](pentomino_part2_files/figure-html/unnamed-chunk-6-1.png){width=921.6}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Another Special 9 Solutions (3 Sets x 3 Solutions)\"}\nsol_sf_comb |> \n  inner_join(sol_by_color) |>\n  filter(n==3) |>\n  arrange(col_pal) |>\n  ggplot() +\n  geom_sf(aes(fill=I(col))) +\n  facet_wrap(~fct_inorder(factor(X1))) +\n  theme_map(font_family=\"Roboto Condensed\")\n```\n\n::: {.cell-output-display}\n![](pentomino_part2_files/figure-html/unnamed-chunk-7-1.png){width=921.6}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"180 Solutions where Pair Exists\"}\nsol_sf_comb |> \n  inner_join(sol_by_color) |>\n  filter(n==2) |>\n  arrange(col_pal) |>\n  ggplot() +\n  geom_sf(aes(fill=I(col))) +\n  facet_wrap(~fct_inorder(factor(X1)),ncol=18) +\n  theme_nothing(font_family=\"Roboto Condensed\") \n```\n\n::: {.cell-output-display}\n![](pentomino_part2_files/figure-html/unnamed-chunk-8-1.png){width=921.6}\n:::\n:::\n\n\n\n\n### Wrapping Up 🎁\n\nVisualizing these solutions has been like uncovering hidden patterns in a puzzle. It's been pretty fun execise learning to utilize some of function in `sf` packages too.  And most importantly, now I have solution on my blog I can put away the actual puzzle board after the play. \n\n",
    "supporting": [
      "pentomino_part2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}